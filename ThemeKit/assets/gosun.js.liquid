$(window).resize(function(){
  if ($(window).width() <= 768){	
    $('.width-small-1-1').removeClass('width-1-2');
  }	
});


$(function() {
  $('.purchase-details').html($('.purchase-details').html().replace("undefined", "")); // Hide text near buy button
});

$(function() {
  $('div.option_title').html($('div.option_title').html().replace("Title", "Condition")); // Hide text near buy button
});


$(function() {
  $('.purchase-details').html($('.purchase-details').html().replace("undefined", ""));
});

// ============================================================================
// Navigation / Product
// ============================================================================
/*
function sticktothetop() {
var window_top = $(window).scrollTop();
var top = $('#stick-here').offset().top;
  // Show/hide menu on scroll
if (window_top > top) {
    $('#stickThis').addClass('stick');
    $('#stick-here').height($('#stickThis').outerHeight());
    $('.sticky-fade').fadeIn("fast");

} else {
    $('#stickThis').removeClass('stick');
    $('#stick-here').height(0);
    $('.sticky-fade').fadeOut("fast");

}
}
$(function(){
  $(window).scroll(sticktothetop);
  sticktothetop();
  console.log('Sticking to the top');
});

$(document).ready(function(){
$( "a.scrollLink" ).click(function( event ) {
    event.preventDefault();
    $("html, body").animate({ scrollTop: $($(this).attr("href")).offset().top }, 0);
   
});
});

$(window).scroll(function() {
var scrollDistance = $(window).scrollTop();
// Assign active class to nav links while scolling
$('section--page').each(function(i) {
    if ($(this).position().top <= scrollDistance) {
        $('.subnav__menu a.active-tab').removeClass('active-tab');
        $('.subnav__menu a').eq(i).addClass('active-tab');
    }
    console.log('Counting sections');
});
}).scroll();

*/
// ============================================================================
// Navigation / Promo Banner
// ============================================================================
// When the user scrolls down 40px from the top of the document, hide the promo banner
window.onscroll = function() {scrollFunction()};

function scrollFunction() {
if (document.body.scrollTop > 80 || document.documentElement.scrollTop > 40) {
  $('.promo_banner').addClass('hide');
} else {
  $('.promo_banner').removeClass('hide');
}
} 


/* #Banners / Dialog - [Show/Hide] */
$(".dismiss-trigger").click(function(){
$(".dismiss-target").addClass("hide");
});



// ============================================================================
// Third Party / Shogun
// ============================================================================
/* #Shogun */
$(function() {
$(".shg-product-title-component h3").addClass("article-title base-BodyTitle");
$(".shogun-form button").addClass("btn btn--accent btn--md");
});
/* #Icon + Text / Make vertical */
$(function() {
$(".shg-c .flex-column").addClass("flex");
});


/* #Register / Account */
$(function() {
if ($(window).width() > 768 ) {
   $('.full-left, .full-right').addClass('width-1-2 h100').removeClass('width-1-1');
   $('.full-container').addClass('f-r-c').removeClass('flex flex-column');
   $('.card--lg').addClass('ml30');
   $('.full-left').addClass('align-end');
   $('.full-right').addClass('align-start');
   $('.grid--1-2').addClass('grid--1-4').removeClass('grid--1-2');
   /* #Shogun / Slides */
   $('.shg-sld-nav-button').removeClass('hide');
   $('.shg-sld-slides').addClass('shg-sld-slides-padded');
} else {
    $('.full-left, .full-right').addClass('width-1-1').removeClass('width-1-2 h100');
    $('.full-container').addClass('flex flex-column m0').removeClass('f-r-c');
    $('.card--lg').removeClass('ml30');
    $('.full-left').removeClass('align-end');
    $('.full-right').removeClass('align-start');
    $('.grid--1-4').addClass('grid--1-2').removeClass('grid--1-4');
    $('.shg-sld-nav-button').addClass('hide');
    $('.shg-sld-slides').removeClass('shg-sld-slides-padded');
}
});



// ============================================================================
// Media / Video
// ============================================================================
$('#play').on('click', function(e) {
  e.preventDefault();
  $("#player")[0].src += "?autoplay=1;rel=0;modestbranding=1&amp;title=";
  $('#player').show();
  $('#video-cover').hide();
  $('.btn-wrap').hide();
});

/* #Media / Video â€“ Autoloop */
window.addEventListener('load', async () => {
let video = document.querySelector('video[muted][autoplay]');
try {
  await video.play();
} catch (err) {
  video.controls = true;
}
});


/* Banner H2 to P */

// Select the 'a' tag to be replaced and call the replaceWith method
$('.collection_description h2').replaceWith(function(){
// Execute a callback to generate contents of the replacement
// The $('<div>') part creates a div
return $('<p>', {
    html: this.innerHTML // This takes the html of the 'a' tag and copies it to the new div
});
});


$('.add-to-cart__text').text(function (i, text)
{
  return text.replace('&lt;', '<').replace('&gt;', '>');
});


// Select the 'a' tag to be replaced and call the replaceWith method
$('<span class="add-to-cart__text">+</span>').replaceWith(function(){
// Execute a callback to generate contents of the replacement
// The $('<div>') part creates a div
return $('<span class="icon"> <i class="material-icons-outlined">add_circle_outline</i></span>', {
    html: this.innerHTML // This takes the html of the 'a' tag and copies it to the new div
});
});


/* #Upsell */
$(function() {
$(".productbox").addClass("choice-img bg radius-md col-6@xs col-4@sm col-3@md js-choice-img js-tab-focus");
});






// Utility function
function Util () {};

/* 
class manipulation functions
*/
Util.hasClass = function(el, className) {
if (el.classList) return el.classList.contains(className);
else return !!el.className.match(new RegExp('(\\s|^)' + className + '(\\s|$)'));
};

Util.addClass = function(el, className) {
var classList = className.split(' ');
 if (el.classList) el.classList.add(classList[0]);
 else if (!Util.hasClass(el, classList[0])) el.className += " " + classList[0];
 if (classList.length > 1) Util.addClass(el, classList.slice(1).join(' '));
};

Util.removeClass = function(el, className) {
var classList = className.split(' ');
if (el.classList) el.classList.remove(classList[0]);	
else if(Util.hasClass(el, classList[0])) {
  var reg = new RegExp('(\\s|^)' + classList[0] + '(\\s|$)');
  el.className=el.className.replace(reg, ' ');
}
if (classList.length > 1) Util.removeClass(el, classList.slice(1).join(' '));
};

Util.toggleClass = function(el, className, bool) {
if(bool) Util.addClass(el, className);
else Util.removeClass(el, className);
};

Util.setAttributes = function(el, attrs) {
for(var key in attrs) {
  el.setAttribute(key, attrs[key]);
}
};

/* 
DOM manipulation
*/
Util.getChildrenByClassName = function(el, className) {
var children = el.children,
  childrenByClass = [];
for (var i = 0; i < el.children.length; i++) {
  if (Util.hasClass(el.children[i], className)) childrenByClass.push(el.children[i]);
}
return childrenByClass;
};

Util.is = function(elem, selector) {
if(selector.nodeType){
  return elem === selector;
}

var qa = (typeof(selector) === 'string' ? document.querySelectorAll(selector) : selector),
  length = qa.length,
  returnArr = [];

while(length--){
  if(qa[length] === elem){
    return true;
  }
}

return false;
};

/* 
Animate height of an element
*/
Util.setHeight = function(start, to, element, duration, cb) {
var change = to - start,
    currentTime = null;

var animateHeight = function(timestamp){  
  if (!currentTime) currentTime = timestamp;         
  var progress = timestamp - currentTime;
  var val = parseInt((progress/duration)*change + start);
  element.style.height = val+"px";
  if(progress < duration) {
      window.requestAnimationFrame(animateHeight);
  } else {
    cb();
  }
};

//set the height of the element before starting animation -> fix bug on Safari
element.style.height = start+"px";
window.requestAnimationFrame(animateHeight);
};

/* 
Smooth Scroll
*/

Util.scrollTo = function(final, duration, cb, scrollEl) {
var element = scrollEl || window;
var start = element.scrollTop || document.documentElement.scrollTop,
  currentTime = null;

if(!scrollEl) start = window.scrollY || document.documentElement.scrollTop;
    
var animateScroll = function(timestamp){
  if (!currentTime) currentTime = timestamp;        
  var progress = timestamp - currentTime;
  if(progress > duration) progress = duration;
  var val = Math.easeInOutQuad(progress, start, final-start, duration);
  element.scrollTo(0, val);
  if(progress < duration) {
      window.requestAnimationFrame(animateScroll);
  } else {
    cb && cb();
  }
};

window.requestAnimationFrame(animateScroll);
};

/* 
Focus utility classes
*/

//Move focus to an element
Util.moveFocus = function (element) {
if( !element ) element = document.getElementsByTagName("body")[0];
element.focus();
if (document.activeElement !== element) {
  element.setAttribute('tabindex','-1');
  element.focus();
}
};

/* 
Misc
*/

Util.getIndexInArray = function(array, el) {
return Array.prototype.indexOf.call(array, el);
};

Util.cssSupports = function(property, value) {
if('CSS' in window) {
  return CSS.supports(property, value);
} else {
  var jsProperty = property.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase();});
  return jsProperty in document.body.style;
}
};

// merge a set of user options into plugin defaults
// https://gomakethings.com/vanilla-javascript-version-of-jquery-extend/
Util.extend = function() {
// Variables
var extended = {};
var deep = false;
var i = 0;
var length = arguments.length;

// Check if a deep merge
if ( Object.prototype.toString.call( arguments[0] ) === '[object Boolean]' ) {
  deep = arguments[0];
  i++;
}

// Merge the object into the extended object
var merge = function (obj) {
  for ( var prop in obj ) {
    if ( Object.prototype.hasOwnProperty.call( obj, prop ) ) {
      // If deep merge and property is an object, merge properties
      if ( deep && Object.prototype.toString.call(obj[prop]) === '[object Object]' ) {
        extended[prop] = extend( true, extended[prop], obj[prop] );
      } else {
        extended[prop] = obj[prop];
      }
    }
  }
};

// Loop through each object and conduct a merge
for ( ; i < length; i++ ) {
  var obj = arguments[i];
  merge(obj);
}

return extended;
};

// Check if Reduced Motion is enabled
Util.osHasReducedMotion = function() {
if(!window.matchMedia) return false;
var matchMediaObj = window.matchMedia('(prefers-reduced-motion: reduce)');
if(matchMediaObj) return matchMediaObj.matches;
return false; // return false if not supported
}; 

/* 
Polyfills
*/
//Closest() method
if (!Element.prototype.matches) {
Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
}

if (!Element.prototype.closest) {
Element.prototype.closest = function(s) {
  var el = this;
  if (!document.documentElement.contains(el)) return null;
  do {
    if (el.matches(s)) return el;
    el = el.parentElement || el.parentNode;
  } while (el !== null && el.nodeType === 1); 
  return null;
};
}

//Custom Event() constructor
if ( typeof window.CustomEvent !== "function" ) {

function CustomEvent ( event, params ) {
  params = params || { bubbles: false, cancelable: false, detail: undefined };
  var evt = document.createEvent( 'CustomEvent' );
  evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
  return evt;
 }

CustomEvent.prototype = window.Event.prototype;

window.CustomEvent = CustomEvent;
}

/* 
Animation curves
*/
Math.easeInOutQuad = function (t, b, c, d) {
t /= d/2;
if (t < 1) return c/2*t*t + b;
t--;
return -c/2 * (t*(t-2) - 1) + b;
};

Math.easeInQuart = function (t, b, c, d) {
t /= d;
return c*t*t*t*t + b;
};

Math.easeOutQuart = function (t, b, c, d) { 
t /= d;
t--;
return -c * (t*t*t*t - 1) + b;
};

Math.easeInOutQuart = function (t, b, c, d) {
t /= d/2;
if (t < 1) return c/2*t*t*t*t + b;
t -= 2;
return -c/2 * (t*t*t*t - 2) + b;
};

Math.easeOutElastic = function (t, b, c, d) {
var s=1.70158;var p=d*0.7;var a=c;
if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
if (a < Math.abs(c)) { a=c; var s=p/4; }
else var s = p/(2*Math.PI) * Math.asin (c/a);
return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;
};


/* JS Utility Classes */
(function() {
// make focus ring visible only for keyboard navigation (i.e., tab key) 
var focusTab = document.getElementsByClassName('js-tab-focus');
function detectClick() {
  if(focusTab.length > 0) {
    resetFocusTabs(false);
    window.addEventListener('keydown', detectTab);
  }
  window.removeEventListener('mousedown', detectClick);
};

function detectTab(event) {
  if(event.keyCode !== 9) return;
  resetFocusTabs(true);
  window.removeEventListener('keydown', detectTab);
  window.addEventListener('mousedown', detectClick);
};

function resetFocusTabs(bool) {
  var outlineStyle = bool ? '' : 'none';
  for(var i = 0; i < focusTab.length; i++) {
    focusTab[i].style.setProperty('outline', outlineStyle);
  }
};
window.addEventListener('mousedown', detectClick);
}());








// File#: _1_rating
// Usage: codyhouse.co/license
(function() {
  var Rating = function(element) {
    this.element = element;
    this.icons = this.element.getElementsByClassName('js-rating__control')[0];
    this.iconCode = this.icons.children[0].parentNode.innerHTML;
    this.initialRating = [];
    this.initialRatingElement = this.element.getElementsByClassName('js-rating__value')[0];
    this.ratingItems;
    this.selectedRatingItem;
    this.readOnly = Util.hasClass(this.element, 'js-rating--read-only');
    this.ratingMaxValue = 5;
    this.getInitialRating();
    this.initRatingHtml();
  };

  Rating.prototype.getInitialRating = function() {
    // get the rating of the product
    if(!this.initialRatingElement || !this.readOnly) {
      this.initialRating = [0, false];
      return;
    }

    var initialValue = Number(this.initialRatingElement.textContent);
    if(isNaN(initialValue)) {
      this.initialRating = [0, false];
      return;
    }

    var floorNumber = Math.floor(initialValue);
    this.initialRating[0] = (floorNumber < initialValue) ? floorNumber + 1 : floorNumber;
    this.initialRating[1] = (floorNumber < initialValue) ? Math.round((initialValue - floorNumber)*100) : false;
  };

  Rating.prototype.initRatingHtml = function() {
    //create the star elements
    var iconsList = this.readOnly ? '<ul>' : '<ul role="radiogroup">';
    
    //if initial rating value is zero -> add a 'zero' item 
    if(this.initialRating[0] == 0 && !this.initialRating[1]) {
      iconsList = iconsList+ '<li class="rating__item--zero rating__item--checked"></li>';
    }

    // create the stars list 
    for(var i = 0; i < this.ratingMaxValue; i++) { 
      iconsList = iconsList + this.getStarHtml(i);
    }
    iconsList = iconsList + '</ul>';

    // --default variation only - improve SR accessibility including a legend element 
    if(!this.readOnly) {
      var labelElement = this.element.getElementsByTagName('label');
      if(labelElement.length > 0) {
        var legendElement = '<legend class="'+labelElement[0].getAttribute('class')+'">'+labelElement[0].textContent+'</legend>';
        iconsList = '<fieldset>'+legendElement+iconsList+'</fieldset>';
        Util.addClass(labelElement[0], 'is-hidden');
      }
    }

    this.icons.innerHTML = iconsList;
    
    //init object properties
    this.ratingItems = this.icons.getElementsByClassName('js-rating__item');
    this.selectedRatingItem = this.icons.getElementsByClassName('rating__item--checked')[0];

    //show the stars
    Util.removeClass(this.icons, 'rating__control--is-hidden');

    //event listener
    !this.readOnly && this.initRatingEvents();// rating vote enabled
  };

  Rating.prototype.getStarHtml = function(index) {
    var listItem = '';
    var checked = (index+1 == this.initialRating[0]) ? true : false,
      itemClass = checked ? ' rating__item--checked' : '',
      tabIndex = (checked || (this.initialRating[0] == 0 && !this.initialRating[1] && index == 0) ) ? 0 : -1,
      showHalf = checked && this.initialRating[1] ? true : false,
      iconWidth = showHalf ? ' rating__item--half': '';
    if(!this.readOnly) {
      listItem = '<li class="js-rating__item'+itemClass+iconWidth+'" role="radio" aria-label="'+(index+1)+'" aria-checked="'+checked+'" tabindex="'+tabIndex+'"><div class="rating__icon">'+this.iconCode+'</div></li>';
    } else {
      var starInner = showHalf ? '<div class="rating__icon">'+this.iconCode+'</div><div class="rating__icon rating__icon--inactive">'+this.iconCode+'</div>': '<div class="rating__icon">'+this.iconCode+'</div>';
      listItem = '<li class="js-rating__item'+itemClass+iconWidth+'">'+starInner+'</li>';
    }
    return listItem;
  };

  Rating.prototype.initRatingEvents = function() {
    var self = this;

    //click on a star
    this.icons.addEventListener('click', function(event){
      var trigger = event.target.closest('.js-rating__item');
      self.resetSelectedIcon(trigger);
    });

    //keyboard navigation -> select new star
    this.icons.addEventListener('keydown', function(event){
      if( event.keyCode && (event.keyCode == 39 || event.keyCode == 40 ) || event.key && (event.key.toLowerCase() == 'arrowright' || event.key.toLowerCase() == 'arrowdown') ) {
        self.selectNewIcon('next'); //select next star on arrow right/down
      } else if(event.keyCode && (event.keyCode == 37 || event.keyCode == 38 ) || event.key && (event.key.toLowerCase() == 'arrowleft' || event.key.toLowerCase() == 'arrowup')) {
        self.selectNewIcon('prev'); //select prev star on arrow left/up
      } else if(event.keyCode && event.keyCode == 32 || event.key && event.key == ' ') {
        self.selectFocusIcon(); // select focused star on Space
      }
    });
  };

  Rating.prototype.selectNewIcon = function(direction) {
    var index = Util.getIndexInArray(this.ratingItems, this.selectedRatingItem);
    index = (direction == 'next') ? index + 1 : index - 1;
    if(index < 0) index = this.ratingItems.length - 1;
    if(index >= this.ratingItems.length) index = 0;	
    this.resetSelectedIcon(this.ratingItems[index]);
    this.ratingItems[index].focus();
  };

  Rating.prototype.selectFocusIcon = function(direction) {
    this.resetSelectedIcon(document.activeElement);
  };

  Rating.prototype.resetSelectedIcon = function(trigger) {
    if(!trigger) return;
    Util.removeClass(this.selectedRatingItem, 'rating__item--checked');
    Util.setAttributes(this.selectedRatingItem, {'aria-checked': false, 'tabindex': -1});
    Util.addClass(trigger, 'rating__item--checked');
    Util.setAttributes(trigger, {'aria-checked': true, 'tabindex': 0});
    this.selectedRatingItem = trigger; 
    // update select input value
    var select = this.element.getElementsByTagName('select');
    if(select.length > 0) {
      select[0].value = trigger.getAttribute('aria-label');
    }
  };
  
  //initialize the Rating objects
  var ratings = document.getElementsByClassName('js-rating');
  if( ratings.length > 0 ) {
    for( var i = 0; i < ratings.length; i++) {
      (function(i){new Rating(ratings[i]);})(i);
    }
  };
}());



// File#: _1_accordion ============================================================================
// Usage: codyhouse.co/license 
(function() {
var Accordion = function(element) {
  this.element = element;
  this.items = Util.getChildrenByClassName(this.element, 'js-accordion__item');
  this.version = this.element.getAttribute('data-version') ? '-'+this.element.getAttribute('data-version') : '';
  this.showClass = 'accordion'+this.version+'__item--is-open';
  this.animateHeight = (this.element.getAttribute('data-animation') == 'on');
  this.multiItems = !(this.element.getAttribute('data-multi-items') == 'off'); 
  this.initAccordion();
};

Accordion.prototype.initAccordion = function() {
  //set initial aria attributes
  for( var i = 0; i < this.items.length; i++) {
    var button = this.items[i].getElementsByTagName('button')[0],
      content = this.items[i].getElementsByClassName('js-accordion__panel')[0],
      isOpen = Util.hasClass(this.items[i], this.showClass) ? 'true' : 'false';
    Util.setAttributes(button, {'aria-expanded': isOpen, 'aria-controls': 'accordion-content-'+i, 'id': 'accordion-header-'+i});
    Util.addClass(button, 'js-accordion__trigger');
    Util.setAttributes(content, {'aria-labelledby': 'accordion-header-'+i, 'id': 'accordion-content-'+i});
  }

  //listen for Accordion events
  this.initAccordionEvents();
};

Accordion.prototype.initAccordionEvents = function() {
  var self = this;

  this.element.addEventListener('click', function(event) {
    var trigger = event.target.closest('.js-accordion__trigger');
    //check index to make sure the click didn't happen inside a children accordion
    if( trigger && Util.getIndexInArray(self.items, trigger.parentElement) >= 0) self.triggerAccordion(trigger);
  });
};

Accordion.prototype.triggerAccordion = function(trigger) {
  var self = this;
  var bool = (trigger.getAttribute('aria-expanded') === 'true');

  this.animateAccordion(trigger, bool);
};

Accordion.prototype.animateAccordion = function(trigger, bool) {
  var self = this;
  var item = trigger.closest('.js-accordion__item'),
    content = item.getElementsByClassName('js-accordion__panel')[0],
    ariaValue = bool ? 'false' : 'true';

  if(!bool) Util.addClass(item, this.showClass);
  trigger.setAttribute('aria-expanded', ariaValue);
  self.resetContentVisibility(item, content, bool);

  if( !this.multiItems && !bool) this.closeSiblings(item);
};

Accordion.prototype.resetContentVisibility = function(item, content, bool) {
  Util.toggleClass(item, this.showClass, !bool);
  content.removeAttribute("style");
  if(bool && !this.multiItems) { // accordion item has been closed -> check if there's one open to move inside viewport 
    this.moveContent();
  }
};

Accordion.prototype.closeSiblings = function(item) {
  //if only one accordion can be open -> search if there's another one open
  var index = Util.getIndexInArray(this.items, item);
  for( var i = 0; i < this.items.length; i++) {
    if(Util.hasClass(this.items[i], this.showClass) && i != index) {
      this.animateAccordion(this.items[i].getElementsByClassName('js-accordion__trigger')[0], true);
      return false;
    }
  }
};

Accordion.prototype.moveContent = function() { // make sure title of the accordion just opened is inside the viewport
  var openAccordion = this.element.getElementsByClassName(this.showClass);
  if(openAccordion.length == 0) return;
  var boundingRect = openAccordion[0].getBoundingClientRect();
  if(boundingRect.top < 0 || boundingRect.top > window.innerHeight) {
    var windowScrollTop = window.scrollY || document.documentElement.scrollTop;
    window.scrollTo(0, boundingRect.top + windowScrollTop);
  }
};

//initialize the Accordion objects
var accordions = document.getElementsByClassName('js-accordion');
if( accordions.length > 0 ) {
  for( var i = 0; i < accordions.length; i++) {
    (function(i){new Accordion(accordions[i]);})(i);
  }
}
}());


// File#: _1_modal-window
// Usage: codyhouse.co/license
(function() {
  var Modal = function(element) {
    this.element = element;
    this.triggers = document.querySelectorAll('[aria-controls="'+this.element.getAttribute('id')+'"]');
    this.firstFocusable = null;
    this.lastFocusable = null;
    this.moveFocusEl = null; // focus will be moved to this element when modal is open
    this.modalFocus = this.element.getAttribute('data-modal-first-focus') ? this.element.querySelector(this.element.getAttribute('data-modal-first-focus')) : null;
    this.selectedTrigger = null;
    this.showClass = "modal--is-visible";
    this.initModal();
  };

  Modal.prototype.initModal = function() {
    var self = this;
    //open modal when clicking on trigger buttons
    if ( this.triggers ) {
      for(var i = 0; i < this.triggers.length; i++) {
        this.triggers[i].addEventListener('click', function(event) {
          event.preventDefault();
          if(Util.hasClass(self.element, self.showClass)) {
            self.closeModal();
            return;
          }
          self.selectedTrigger = event.target;
          self.showModal();
          self.initModalEvents();
        });
      }
    }

    // listen to the openModal event -> open modal without a trigger button
    this.element.addEventListener('openModal', function(event){
      if(event.detail) self.selectedTrigger = event.detail;
      self.showModal();
      self.initModalEvents();
    });

    // listen to the closeModal event -> close modal without a trigger button
    this.element.addEventListener('closeModal', function(event){
      if(event.detail) self.selectedTrigger = event.detail;
      self.closeModal();
    });

    // if modal is open by default -> initialise modal events
    if(Util.hasClass(this.element, this.showClass)) this.initModalEvents();
  };

  Modal.prototype.showModal = function() {
    var self = this;
    Util.addClass(this.element, this.showClass);
    this.getFocusableElements();
    this.moveFocusEl.focus();
    // wait for the end of transitions before moving focus
    this.element.addEventListener("transitionend", function cb(event) {
      self.moveFocusEl.focus();
      self.element.removeEventListener("transitionend", cb);
    });
    this.emitModalEvents('modalIsOpen');
  };

  Modal.prototype.closeModal = function() {
    if(!Util.hasClass(this.element, this.showClass)) return;
    Util.removeClass(this.element, this.showClass);
    this.firstFocusable = null;
    this.lastFocusable = null;
    this.moveFocusEl = null;
    if(this.selectedTrigger) this.selectedTrigger.focus();
    //remove listeners
    this.cancelModalEvents();
    this.emitModalEvents('modalIsClose');
  };

  Modal.prototype.initModalEvents = function() {
    //add event listeners
    this.element.addEventListener('keydown', this);
    this.element.addEventListener('click', this);
  };

  Modal.prototype.cancelModalEvents = function() {
    //remove event listeners
    this.element.removeEventListener('keydown', this);
    this.element.removeEventListener('click', this);
  };

  Modal.prototype.handleEvent = function (event) {
    switch(event.type) {
      case 'click': {
        this.initClick(event);
      }
      case 'keydown': {
        this.initKeyDown(event);
      }
    }
  };

  Modal.prototype.initKeyDown = function(event) {
    if( event.keyCode && event.keyCode == 9 || event.key && event.key == 'Tab' ) {
      //trap focus inside modal
      this.trapFocus(event);
    } else if( (event.keyCode && event.keyCode == 13 || event.key && event.key == 'Enter') && event.target.closest('.js-modal__close')) {
      event.preventDefault();
      this.closeModal(); // close modal when pressing Enter on close button
    }	
  };

  Modal.prototype.initClick = function(event) {
    //close modal when clicking on close button or modal bg layer 
    if( !event.target.closest('.js-modal__close') && !Util.hasClass(event.target, 'js-modal') ) return;
    event.preventDefault();
    this.closeModal();
  };

  Modal.prototype.trapFocus = function(event) {
    if( this.firstFocusable == document.activeElement && event.shiftKey) {
      //on Shift+Tab -> focus last focusable element when focus moves out of modal
      event.preventDefault();
      this.lastFocusable.focus();
    }
    if( this.lastFocusable == document.activeElement && !event.shiftKey) {
      //on Tab -> focus first focusable element when focus moves out of modal
      event.preventDefault();
      this.firstFocusable.focus();
    }
  }

  Modal.prototype.getFocusableElements = function() {
    //get all focusable elements inside the modal
    var allFocusable = this.element.querySelectorAll(focusableElString);
    this.getFirstVisible(allFocusable);
    this.getLastVisible(allFocusable);
    this.getFirstFocusable();
  };

  Modal.prototype.getFirstVisible = function(elements) {
    //get first visible focusable element inside the modal
    for(var i = 0; i < elements.length; i++) {
      if( isVisible(elements[i]) ) {
        this.firstFocusable = elements[i];
        break;
      }
    }
  };

  Modal.prototype.getLastVisible = function(elements) {
    //get last visible focusable element inside the modal
    for(var i = elements.length - 1; i >= 0; i--) {
      if( isVisible(elements[i]) ) {
        this.lastFocusable = elements[i];
        break;
      }
    }
  };

  Modal.prototype.getFirstFocusable = function() {
    if(!this.modalFocus || !Element.prototype.matches) {
      this.moveFocusEl = this.firstFocusable;
      return;
    }
    var containerIsFocusable = this.modalFocus.matches(focusableElString);
    if(containerIsFocusable) {
      this.moveFocusEl = this.modalFocus;
    } else {
      this.moveFocusEl = false;
      var elements = this.modalFocus.querySelectorAll(focusableElString);
      for(var i = 0; i < elements.length; i++) {
        if( isVisible(elements[i]) ) {
          this.moveFocusEl = elements[i];
          break;
        }
      }
      if(!this.moveFocusEl) this.moveFocusEl = this.firstFocusable;
    }
  };

  Modal.prototype.emitModalEvents = function(eventName) {
    var event = new CustomEvent(eventName, {detail: this.selectedTrigger});
    this.element.dispatchEvent(event);
  };

  function isVisible(element) {
    return element.offsetWidth || element.offsetHeight || element.getClientRects().length;
  };

  //initialize the Modal objects
  var modals = document.getElementsByClassName('js-modal');
  // generic focusable elements string selector
  var focusableElString = '[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex]:not([tabindex="-1"]), [contenteditable], audio[controls], video[controls], summary';
  if( modals.length > 0 ) {
    var modalArrays = [];
    for( var i = 0; i < modals.length; i++) {
      (function(i){modalArrays.push(new Modal(modals[i]));})(i);
    }

    window.addEventListener('keydown', function(event){ //close modal window on esc
      if(event.keyCode && event.keyCode == 27 || event.key && event.key.toLowerCase() == 'escape') {
        for( var i = 0; i < modalArrays.length; i++) {
          (function(i){modalArrays[i].closeModal();})(i);
        };
      }
    });
  }
}());




// File#: _1_adaptive-navigation ============================================================================
// Usage: codyhouse.co/license
(function() {
var AdaptNav = function(element) {
  this.element = element;
  this.list = this.element.getElementsByClassName('js-adapt-nav__list')[0];
  this.items = this.element.getElementsByClassName('js-adapt-nav__item');
  this.moreBtn = this.element.getElementsByClassName('js-adapt-nav__item--more')[0];
  this.dropdown = this.moreBtn.getElementsByTagName('ul')[0];
  this.dropdownItems = this.dropdown.getElementsByTagName('a');
  this.dropdownClass = 'adapt-nav__dropdown--is-visible';
  this.resizing = false;
  // check if items already outrun nav
  this.outrunIndex = this.items.length;
  initAdaptNav(this);
};

function initAdaptNav(nav) {
  nav.resizing = true;
  resetOutrun(nav, '', true); // initially hide all elements
  resetAdaptNav.bind(nav)(); // reset navigation based on available space

  // listen to resize
  window.addEventListener('resize', function(event){
    if(nav.resizing) return;
    nav.resizing = true;
    window.requestAnimationFrame(resetAdaptNav.bind(nav));
  });

  // wait for font to be loaded
  if(document.fonts) {
    document.fonts.ready.then(function() {
      if(nav.resizing) return;
      nav.resizing = true;
      window.requestAnimationFrame(resetAdaptNav.bind(nav));
    });
  }

  /* dropdown behaviour */
  // init aria-labels
  Util.setAttributes(nav.moreBtn, {'aria-expanded': 'false', 'aria-haspopup': 'true', 'aria-controls': nav.dropdown.getAttribute('id')});
  
  // toggle dropdown on click
  nav.moreBtn.addEventListener('click', function(event){
    if( nav.dropdown.contains(event.target) ) return;
    event.preventDefault();
    toggleMoreDropdown(nav, !Util.hasClass(nav.dropdown, nav.dropdownClass), true);
  });

  // keyboard events 
  nav.dropdown.addEventListener('keydown', function(event) {
    // use up/down arrow to navigate list of menu items
    if( (event.keyCode && event.keyCode == 40) || (event.key && event.key.toLowerCase() == 'arrowdown') ) {
      navigateItems(nav, event, 'next');
    } else if( (event.keyCode && event.keyCode == 38) || (event.key && event.key.toLowerCase() == 'arrowup') ) {
      navigateItems(nav, event, 'prev');
    }
  });

  window.addEventListener('keyup', function(event){
    if( event.keyCode && event.keyCode == 9 || event.key && event.key.toLowerCase() == 'tab' ) { //close dropdown if focus is outside dropdown element
      if (!nav.moreBtn.contains(document.activeElement)) toggleMoreDropdown(nav, false, false);
    } else if( event.keyCode && event.keyCode == 27 || event.key && event.key.toLowerCase() == 'escape' ) {// close menu on 'Esc'
      toggleMoreDropdown(nav, false, false);
    } 
  });
  
  // close menu when clicking outside it
  window.addEventListener('click', function(event){
    if( !nav.moreBtn.contains(event.target)) toggleMoreDropdown(nav, false);
  });
};

function resetAdaptNav() { // reset nav appearance
  var totalWidth = getListWidth(this.list),
    moreWidth = getFullWidth(this.moreBtn),
    maxPosition = totalWidth - moreWidth,
    cloneList = '',
    hideAll = false;

  cloneList = resetOutrun(this, cloneList, false);
  // loop through items -> create clone (if required) and append to dropdown
  for(var i = 0; i < this.outrunIndex; i++) {
    if( Util.hasClass(this.items[i], 'is-hidden')) {
      Util.addClass(this.items[i], 'adapt-nav__item--hidden');
      Util.removeClass(this.items[i], 'is-hidden');
    }
    var right = this.items[i].offsetWidth + this.items[i].offsetLeft + parseFloat(window.getComputedStyle(this.items[i]).getPropertyValue("margin-right"));
    if(right >= maxPosition || hideAll) {
      var clone = this.items[i].cloneNode(true);
      cloneList = cloneList + modifyClone(clone);
      Util.addClass(this.items[i], 'is-hidden');
      hideAll = true;
    } else {
      Util.removeClass(this.items[i], 'is-hidden');
    }
    Util.removeClass(this.items[i], 'adapt-nav__item--hidden');
  }

  Util.toggleClass(this.moreBtn, 'adapt-nav__item--hidden', (cloneList == ''));
  this.dropdown.innerHTML = cloneList;
  Util.addClass(this.element, 'adapt-nav--is-visible');
  this.outrunIndex = this.items.length;
  this.resizing = false;
};

function resetOutrun(nav, cloneList, bool) {
  if(nav.items[0].offsetLeft < 0 || (bool && nav.outrunIndex > 1)) {
    nav.outrunIndex = nav.outrunIndex - 1;
    var clone = nav.items[nav.outrunIndex].cloneNode(true);
    Util.addClass(nav.items[nav.outrunIndex], 'is-hidden');
    cloneList = modifyClone(clone) + cloneList;
    return resetOutrun(nav, cloneList, bool);
  } else {
    if(bool) nav.outrunIndex = nav.items.length;
    return cloneList;
  }
};

function getListWidth(list) { // get total width of container minus right padding
  var style = window.getComputedStyle(list);
  return parseFloat(list.getBoundingClientRect().width) - parseFloat(style.getPropertyValue("padding-right"));
};

function getFullWidth(item) { // get width of 'More Links' button
  return parseFloat(window.getComputedStyle(item).getPropertyValue("width"));
};

function toggleMoreDropdown(nav, bool, moveFocus) { // toggle menu visibility
  Util.toggleClass(nav.dropdown, nav.dropdownClass, bool);
  if(bool) {
    nav.moreBtn.setAttribute('aria-expanded', 'true');
    Util.moveFocus(nav.dropdownItems[0]);
    nav.dropdown.addEventListener("transitionend", function(event) {Util.moveFocus(nav.dropdownItems[0]);}, {once: true});
    placeDropdown(nav);
  } else {
    nav.moreBtn.setAttribute('aria-expanded', 'false');
    if(moveFocus) Util.moveFocus(nav.moreBtn.getElementsByTagName('button')[0]);
    nav.dropdown.style.right = '';
  }
};

function placeDropdown(nav) { // make sure dropdown is visible the viewport
  var dropdownLeft = nav.dropdown.getBoundingClientRect().left;
  if(dropdownLeft < 0) nav.dropdown.style.right = (dropdownLeft - 4)+'px';
};

function navigateItems(nav, event, direction) { // navigate through dropdown items
  event.preventDefault();
  var index = Util.getIndexInArray(nav.dropdownItems, event.target),
    nextIndex = direction == 'next' ? index + 1 : index - 1;
  if(nextIndex < 0) nextIndex = nav.dropdownItems.length - 1;
  if(nextIndex > nav.dropdownItems.length - 1) nextIndex = 0;
  Util.moveFocus(nav.dropdownItems[nextIndex]);
};

function modifyClone(clone) { // assign new classes to cloned elements inside the dropdown
  Util.addClass(clone, 'adapt-nav__dropdown-item');
  Util.removeClass(clone, 'js-adapt-nav__item is-hidden adapt-nav__item--hidden adapt-nav__item');
  var link = clone.getElementsByClassName('adapt-nav__link');
  if(link.length > 0) {
    Util.addClass(link[0], 'adapt-nav__dropdown-link js-tab-focus');
    link[0].style.outline = 'none';
    Util.removeClass(link[0], 'adapt-nav__link');
  }
  return clone.outerHTML;
};

//initialize the AdaptNav objects
var adaptNavs = document.getElementsByClassName('js-adapt-nav'),
  flexSupported = Util.cssSupports('align-items', 'stretch');
if( adaptNavs.length > 0) {
  for( var i = 0; i < adaptNavs.length; i++) {(function(i){
    if(flexSupported) new AdaptNav(adaptNavs[i]);
    else Util.addClass(adaptNavs[i], 'adapt-nav--is-visible');
  })(i);}
}
}());


// File#: _1_reveal-effects ============================================================================
// Usage: codyhouse.co/license
(function() {
var fxElements = document.getElementsByClassName('reveal-fx');
var intersectionObserverSupported = ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype);
if(fxElements.length > 0) {
  // deactivate effect if Reduced Motion is enabled
  if (Util.osHasReducedMotion() || !intersectionObserverSupported) {
    fxRemoveClasses();
    return;
  }
  //on small devices, do not animate elements -> reveal all
  if( fxDisabled(fxElements[0]) ) {
    fxRevealAll();
    return;
  }

  var fxRevealDelta = 200; // amount (in pixel) the element needs to enter the viewport to be revealed - if not custom value (data-reveal-fx-delta)
  
  var viewportHeight = window.innerHeight,
    fxChecking = false,
    fxRevealedItems = [],
    fxElementDelays = fxGetDelays(), //elements animation delay
    fxElementDeltas = fxGetDeltas(); // amount (in px) the element needs enter the viewport to be revealed (default value is fxRevealDelta) 
  
  
  // add event listeners
  window.addEventListener('load', fxReveal);
  window.addEventListener('resize', fxResize);

  // observe reveal elements
  var observer = [];
  initObserver();

  function initObserver() {
    for(var i = 0; i < fxElements.length; i++) {
      observer[i] = new IntersectionObserver(
        function(entries, observer) { 
          if(entries[0].isIntersecting) {
            fxRevealItemObserver(entries[0].target);
            observer.unobserve(entries[0].target);
          }
        }, 
        {rootMargin: "0px 0px -"+fxElementDeltas[i]+"px 0px"}
      );

      observer[i].observe(fxElements[i]);
    }
  };

  function fxRevealAll() { // reveal all elements - small devices
    for(var i = 0; i < fxElements.length; i++) {
      Util.addClass(fxElements[i], 'reveal-fx--is-visible');
    }
  };

  function fxResize() { // on resize - check new window height and reveal visible elements
    if(fxChecking) return;
    fxChecking = true;
    (!window.requestAnimationFrame) ? setTimeout(function(){fxReset();}, 250) : window.requestAnimationFrame(fxReset);
  };

  function fxReset() {
    viewportHeight = window.innerHeight;
    fxReveal();
  };

  function fxReveal() { // reveal visible elements
    for(var i = 0; i < fxElements.length; i++) {(function(i){
      if(fxRevealedItems.indexOf(i) != -1 ) return; //element has already been revelead
      if(fxElementIsVisible(fxElements[i], i)) {
        fxRevealItem(i);
        fxRevealedItems.push(i);
      }})(i); 
    }
    fxResetEvents(); 
    fxChecking = false;
  };

  function fxRevealItem(index) {
    if(fxElementDelays[index] && fxElementDelays[index] != 0) {
      // wait before revealing element if a delay was added
      setTimeout(function(){
        Util.addClass(fxElements[index], 'reveal-fx--is-visible');
      }, fxElementDelays[index]);
    } else {
      Util.addClass(fxElements[index], 'reveal-fx--is-visible');
    }
  };

  function fxRevealItemObserver(item) {
    var index = Util.getIndexInArray(fxElements, item);
    if(fxRevealedItems.indexOf(index) != -1 ) return; //element has already been revelead
    fxRevealItem(index);
    fxRevealedItems.push(index);
    fxResetEvents(); 
    fxChecking = false;
  };

  function fxGetDelays() { // get anmation delays
    var delays = [];
    for(var i = 0; i < fxElements.length; i++) {
      delays.push( fxElements[i].getAttribute('data-reveal-fx-delay') ? parseInt(fxElements[i].getAttribute('data-reveal-fx-delay')) : 0);
    }
    return delays;
  };

  function fxGetDeltas() { // get reveal delta
    var deltas = [];
    for(var i = 0; i < fxElements.length; i++) {
      deltas.push( fxElements[i].getAttribute('data-reveal-fx-delta') ? parseInt(fxElements[i].getAttribute('data-reveal-fx-delta')) : fxRevealDelta);
    }
    return deltas;
  };

  function fxDisabled(element) { // check if elements need to be animated - no animation on small devices
    return !(window.getComputedStyle(element, '::before').getPropertyValue('content').replace(/'|"/g, "") == 'reveal-fx');
  };

  function fxElementIsVisible(element, i) { // element is inside viewport
    return (fxGetElementPosition(element) <= viewportHeight - fxElementDeltas[i]);
  };

  function fxGetElementPosition(element) { // get top position of element
    return element.getBoundingClientRect().top;
  };

  function fxResetEvents() { 
    if(fxElements.length > fxRevealedItems.length) return;
    // remove event listeners if all elements have been revealed
    window.removeEventListener('load', fxReveal);
    window.removeEventListener('resize', fxResize);
  };

  function fxRemoveClasses() {
    // Reduced Motion on or Intersection Observer not supported
    while(fxElements[0]) {
      // remove all classes starting with 'reveal-fx--'
      var classes = fxElements[0].className.split(" ").filter(function(c) {
        return c.lastIndexOf('reveal-fx--', 0) !== 0;
      });
      fxElements[0].className = classes.join(" ").trim();
      Util.removeClass(fxElements[0], 'reveal-fx');
    }
  };
}
}());


// File#: _1_drawer
// Usage: codyhouse.co/license
(function() {
  var Drawer = function(element) {
    this.element = element;
    this.content = document.getElementsByClassName('js-drawer__body')[0];
    this.triggers = document.querySelectorAll('[aria-controls="'+this.element.getAttribute('id')+'"]');
    this.firstFocusable = null;
    this.lastFocusable = null;
    this.selectedTrigger = null;
    this.isModal = Util.hasClass(this.element, 'js-drawer--modal');
    this.showClass = "drawer--is-visible";
    this.initDrawer();
  };

  Drawer.prototype.initDrawer = function() {
    var self = this;
    //open drawer when clicking on trigger buttons
    if ( this.triggers ) {
      for(var i = 0; i < this.triggers.length; i++) {
        this.triggers[i].addEventListener('click', function(event) {
          event.preventDefault();
          if(Util.hasClass(self.element, self.showClass)) {
            self.closeDrawer(event.target);
            return;
          }
          self.selectedTrigger = event.target;
          self.showDrawer();
          self.initDrawerEvents();
        });
      }
    }

    // if drawer is already open -> we should initialize the drawer events
    if(Util.hasClass(this.element, this.showClass)) this.initDrawerEvents();
  };

  Drawer.prototype.showDrawer = function() {
    var self = this;
    this.content.scrollTop = 0;
    Util.addClass(this.element, this.showClass);
    this.getFocusableElements();
    Util.moveFocus(this.element);
    // wait for the end of transitions before moving focus
    this.element.addEventListener("transitionend", function cb(event) {
      Util.moveFocus(self.element);
      self.element.removeEventListener("transitionend", cb);
    });
    this.emitDrawerEvents('drawerIsOpen', this.selectedTrigger);
  };

  Drawer.prototype.closeDrawer = function(target) {
    Util.removeClass(this.element, this.showClass);
    this.firstFocusable = null;
    this.lastFocusable = null;
    if(this.selectedTrigger) this.selectedTrigger.focus();
    //remove listeners
    this.cancelDrawerEvents();
    this.emitDrawerEvents('drawerIsClose', target);
  };

  Drawer.prototype.initDrawerEvents = function() {
    //add event listeners
    this.element.addEventListener('keydown', this);
    this.element.addEventListener('click', this);
  };

  Drawer.prototype.cancelDrawerEvents = function() {
    //remove event listeners
    this.element.removeEventListener('keydown', this);
    this.element.removeEventListener('click', this);
  };

  Drawer.prototype.handleEvent = function (event) {
    switch(event.type) {
      case 'click': {
        this.initClick(event);
      }
      case 'keydown': {
        this.initKeyDown(event);
      }
    }
  };

  Drawer.prototype.initKeyDown = function(event) {
    if( event.keyCode && event.keyCode == 27 || event.key && event.key == 'Escape' ) {
      //close drawer window on esc
      this.closeDrawer(false);
    } else if( this.isModal && (event.keyCode && event.keyCode == 9 || event.key && event.key == 'Tab' )) {
      //trap focus inside drawer
      this.trapFocus(event);
    }
  };

  Drawer.prototype.initClick = function(event) {
    //close drawer when clicking on close button or drawer bg layer 
    if( !event.target.closest('.js-drawer__close') && !Util.hasClass(event.target, 'js-drawer') ) return;
    event.preventDefault();
    this.closeDrawer(event.target);
  };

  Drawer.prototype.trapFocus = function(event) {
    if( this.firstFocusable == document.activeElement && event.shiftKey) {
      //on Shift+Tab -> focus last focusable element when focus moves out of drawer
      event.preventDefault();
      this.lastFocusable.focus();
    }
    if( this.lastFocusable == document.activeElement && !event.shiftKey) {
      //on Tab -> focus first focusable element when focus moves out of drawer
      event.preventDefault();
      this.firstFocusable.focus();
    }
  }

  Drawer.prototype.getFocusableElements = function() {
    //get all focusable elements inside the drawer
    var allFocusable = this.element.querySelectorAll('[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex]:not([tabindex="-1"]), [contenteditable], audio[controls], video[controls], summary');
    this.getFirstVisible(allFocusable);
    this.getLastVisible(allFocusable);
  };

  Drawer.prototype.getFirstVisible = function(elements) {
    //get first visible focusable element inside the drawer
    for(var i = 0; i < elements.length; i++) {
      if( elements[i].offsetWidth || elements[i].offsetHeight || elements[i].getClientRects().length ) {
        this.firstFocusable = elements[i];
        return true;
      }
    }
  };

  Drawer.prototype.getLastVisible = function(elements) {
    //get last visible focusable element inside the drawer
    for(var i = elements.length - 1; i >= 0; i--) {
      if( elements[i].offsetWidth || elements[i].offsetHeight || elements[i].getClientRects().length ) {
        this.lastFocusable = elements[i];
        return true;
      }
    }
  };

  Drawer.prototype.emitDrawerEvents = function(eventName, target) {
    var event = new CustomEvent(eventName, {detail: target});
    this.element.dispatchEvent(event);
  };

  //initialize the Drawer objects
  var drawer = document.getElementsByClassName('js-drawer');
  if( drawer.length > 0 ) {
    for( var i = 0; i < drawer.length; i++) {
      (function(i){new Drawer(drawer[i]);})(i);
    }
  }
}());



// File#: _1_alert
// Usage: codyhouse.co/license
(function() {
  var alertClose = document.getElementsByClassName('js-alert__close-btn');
  if( alertClose.length > 0 ) {
    for( var i = 0; i < alertClose.length; i++) {
      (function(i){initAlertEvent(alertClose[i]);})(i);
    }
  };
}());

function initAlertEvent(element) {
  element.addEventListener('click', function(event){
    event.preventDefault();
    Util.removeClass(element.closest('.js-alert'), 'alert--is-visible');
  });
};



// File#: _1_custom-select
// Usage: codyhouse.co/license
(function() {
  // NOTE: you need the js code only when using the --custom-dropdown variation of the Custom Select component. Default version does nor require JS.
  
  var CustomSelect = function(element) {
    this.element = element;
    this.select = this.element.getElementsByTagName('select')[0];
    this.optGroups = this.select.getElementsByTagName('optgroup');
    this.options = this.select.getElementsByTagName('option');
    this.selectedOption = getSelectedOptionText(this);
    this.selectId = this.select.getAttribute('id');
    this.trigger = false;
    this.dropdown = false;
    this.customOptions = false;
    this.arrowIcon = this.element.getElementsByTagName('svg');
    this.label = document.querySelector('[for="'+this.selectId+'"]');

    this.optionIndex = 0; // used while building the custom dropdown

    initCustomSelect(this); // init markup
    initCustomSelectEvents(this); // init event listeners
  };
  
  function initCustomSelect(select) {
    // create the HTML for the custom dropdown element
    select.element.insertAdjacentHTML('beforeend', initButtonSelect(select) + initListSelect(select));
    
    // save custom elements
    select.dropdown = select.element.getElementsByClassName('js-select__dropdown')[0];
    select.trigger = select.element.getElementsByClassName('js-select__button')[0];
    select.customOptions = select.dropdown.getElementsByClassName('js-select__item');
    
    // hide default select
    Util.addClass(select.select, 'is-hidden');
    if(select.arrowIcon.length > 0 ) select.arrowIcon[0].style.display = 'none';

    // place dropdown
    placeDropdown(select);
  };

  function initCustomSelectEvents(select) {
    // option selection in dropdown
    initSelection(select);

    // click events
    select.trigger.addEventListener('click', function(){
      toggleCustomSelect(select, false);
    });
    if(select.label) {
      // move focus to custom trigger when clicking on <select> label
      select.label.addEventListener('click', function(){
        Util.moveFocus(select.trigger);
      });
    }
    // keyboard navigation
    select.dropdown.addEventListener('keydown', function(event){
      if(event.keyCode && event.keyCode == 38 || event.key && event.key.toLowerCase() == 'arrowup') {
        keyboardCustomSelect(select, 'prev', event);
      } else if(event.keyCode && event.keyCode == 40 || event.key && event.key.toLowerCase() == 'arrowdown') {
        keyboardCustomSelect(select, 'next', event);
      }
    });
    // native <select> element has been updated -> update custom select as well
    select.element.addEventListener('select-updated', function(event){
      resetCustomSelect(select);
    });
  };

  function toggleCustomSelect(select, bool) {
    var ariaExpanded;
    if(bool) {
      ariaExpanded = bool;
    } else {
      ariaExpanded = select.trigger.getAttribute('aria-expanded') == 'true' ? 'false' : 'true';
    }
    select.trigger.setAttribute('aria-expanded', ariaExpanded);
    if(ariaExpanded == 'true') {
      var selectedOption = getSelectedOption(select);
      Util.moveFocus(selectedOption); // fallback if transition is not supported
      select.dropdown.addEventListener('transitionend', function cb(){
        Util.moveFocus(selectedOption);
        select.dropdown.removeEventListener('transitionend', cb);
      });
      placeDropdown(select); // place dropdown based on available space
    }
  };

  function placeDropdown(select) {
    // remove placement classes to reset position
    Util.removeClass(select.dropdown, 'select__dropdown--right select__dropdown--up');
    var triggerBoundingRect = select.trigger.getBoundingClientRect();
    Util.toggleClass(select.dropdown, 'select__dropdown--right', (document.documentElement.clientWidth - 5 < triggerBoundingRect.left + select.dropdown.offsetWidth));
    // check if there's enough space up or down
    var moveUp = (window.innerHeight - triggerBoundingRect.bottom - 5) < triggerBoundingRect.top;
    Util.toggleClass(select.dropdown, 'select__dropdown--up', moveUp);
    // check if we need to set a max width
    var maxHeight = moveUp ? triggerBoundingRect.top - 20 : window.innerHeight - triggerBoundingRect.bottom - 20;
    // set max-height based on available space
    select.dropdown.setAttribute('style', 'max-height: '+maxHeight+'px; width: '+triggerBoundingRect.width+'px;');
  };

  function keyboardCustomSelect(select, direction, event) { // navigate custom dropdown with keyboard
    event.preventDefault();
    var index = Util.getIndexInArray(select.customOptions, document.activeElement);
    index = (direction == 'next') ? index + 1 : index - 1;
    if(index < 0) index = select.customOptions.length - 1;
    if(index >= select.customOptions.length) index = 0;
    Util.moveFocus(select.customOptions[index]);
  };

  function initSelection(select) { // option selection
    select.dropdown.addEventListener('click', function(event){
      var option = event.target.closest('.js-select__item');
      if(!option) return;
      selectOption(select, option);
    });
  };
  
  function selectOption(select, option) {
    if(option.hasAttribute('aria-selected') && option.getAttribute('aria-selected') == 'true') {
      // selecting the same option
      select.trigger.setAttribute('aria-expanded', 'false'); // hide dropdown
    } else { 
      var selectedOption = select.dropdown.querySelector('[aria-selected="true"]');
      if(selectedOption) selectedOption.setAttribute('aria-selected', 'false');
      option.setAttribute('aria-selected', 'true');
      select.trigger.getElementsByClassName('js-select__label')[0].textContent = option.textContent;
      select.trigger.setAttribute('aria-expanded', 'false');
      // new option has been selected -> update native <select> element _ arai-label of trigger <button>
      updateNativeSelect(select, option.getAttribute('data-index'));
      updateTriggerAria(select); 
    }
    // move focus back to trigger
    select.trigger.focus();
  };

  function updateNativeSelect(select, index) {
    select.select.selectedIndex = index;
    select.select.dispatchEvent(new CustomEvent('change', {bubbles: true})); // trigger change event
  };

  function updateTriggerAria(select) {
    select.trigger.setAttribute('aria-label', select.options[select.select.selectedIndex].innerHTML+', '+select.label.textContent);
  };

  function getSelectedOptionText(select) {// used to initialize the label of the custom select button
    var label = '';
    if('selectedIndex' in select.select) {
      label = select.options[select.select.selectedIndex].text;
    } else {
      label = select.select.querySelector('option[selected]').text;
    }
    return label;

  };
  
  function initButtonSelect(select) { // create the button element -> custom select trigger
    // check if we need to add custom classes to the button trigger
    var customClasses = select.element.getAttribute('data-trigger-class') ? ' '+select.element.getAttribute('data-trigger-class') : '';

    var label = select.options[select.select.selectedIndex].innerHTML+', '+select.label.textContent;
  
    var button = '<button type="button" class="js-select__button select__button'+customClasses+'" aria-label="'+label+'" aria-expanded="false" aria-controls="'+select.selectId+'-dropdown"><span aria-hidden="true" class="js-select__label select__label">'+select.selectedOption+'</span>';
    if(select.arrowIcon.length > 0 && select.arrowIcon[0].outerHTML) {
      var clone = select.arrowIcon[0].cloneNode(true);
      Util.removeClass(clone, 'select__icon');
      button = button +clone.outerHTML;
    }
    
    return button+'</button>';

  };

  function initListSelect(select) { // create custom select dropdown
    var list = '<div class="js-select__dropdown select__dropdown" aria-describedby="'+select.selectId+'-description" id="'+select.selectId+'-dropdown">';
    list = list + getSelectLabelSR(select);
    if(select.optGroups.length > 0) {
      for(var i = 0; i < select.optGroups.length; i++) {
        var optGroupList = select.optGroups[i].getElementsByTagName('option'),
          optGroupLabel = '<li><span class="select__item select__item--optgroup">'+select.optGroups[i].getAttribute('label')+'</span></li>';
        list = list + '<ul class="select__list" role="listbox">'+optGroupLabel+getOptionsList(select, optGroupList) + '</ul>';
      }
    } else {
      list = list + '<ul class="select__list" role="listbox">'+getOptionsList(select, select.options) + '</ul>';
    }
    return list;
  };

  function getSelectLabelSR(select) {
    if(select.label) {
      return '<p class="sr-only" id="'+select.selectId+'-description">'+select.label.textContent+'</p>'
    } else {
      return '';
    }
  };
  
  function resetCustomSelect(select) {
    // <select> element has been updated (using an external control) - update custom select
    var selectedOption = select.dropdown.querySelector('[aria-selected="true"]');
    if(selectedOption) selectedOption.setAttribute('aria-selected', 'false');
    var option = select.dropdown.querySelector('.js-select__item[data-index="'+select.select.selectedIndex+'"]');
    option.setAttribute('aria-selected', 'true');
    select.trigger.getElementsByClassName('js-select__label')[0].textContent = option.textContent;
    select.trigger.setAttribute('aria-expanded', 'false');
    updateTriggerAria(select); 
  };

  function getOptionsList(select, options) {
    var list = '';
    for(var i = 0; i < options.length; i++) {
      var selected = options[i].hasAttribute('selected') ? ' aria-selected="true"' : ' aria-selected="false"';
      list = list + '<li><button type="button" class="reset js-select__item select__item select__item--option" role="option" data-value="'+options[i].value+'" '+selected+' data-index="'+select.optionIndex+'">'+options[i].text+'</button></li>';
      select.optionIndex = select.optionIndex + 1;
    };
    return list;
  };

  function getSelectedOption(select) {
    var option = select.dropdown.querySelector('[aria-selected="true"]');
    if(option) return option;
    else return select.dropdown.getElementsByClassName('js-select__item')[0];
  };

  function moveFocusToSelectTrigger(select) {
    if(!document.activeElement.closest('.js-select')) return
    select.trigger.focus();
  };
  
  function checkCustomSelectClick(select, target) { // close select when clicking outside it
    if( !select.element.contains(target) ) toggleCustomSelect(select, 'false');
  };
  
  //initialize the CustomSelect objects
  var customSelect = document.getElementsByClassName('js-select');
  if( customSelect.length > 0 ) {
    var selectArray = [];
    for( var i = 0; i < customSelect.length; i++) {
      (function(i){selectArray.push(new CustomSelect(customSelect[i]));})(i);
    }

    // listen for key events
    window.addEventListener('keyup', function(event){
      if( event.keyCode && event.keyCode == 27 || event.key && event.key.toLowerCase() == 'escape' ) {
        // close custom select on 'Esc'
        selectArray.forEach(function(element){
          moveFocusToSelectTrigger(element); // if focus is within dropdown, move it to dropdown trigger
          toggleCustomSelect(element, 'false'); // close dropdown
        });
      } 
    });
    // close custom select when clicking outside it
    window.addEventListener('click', function(event){
      selectArray.forEach(function(element){
        checkCustomSelectClick(element, event.target);
      });
    });
  }
}());



// File#: _1_countup ============================================================================
// Usage: codyhouse.co/license
(function() {	
var CountUp = function(opts) {
  this.options = Util.extend(CountUp.defaults , opts);
  this.element = this.options.element;
  this.initialValue = parseFloat(this.options.initial);
  this.finalValue = parseFloat(this.element.textContent);
  this.intervalId;
  this.animationTriggered = false;
  // animation will run only on browsers supporting IntersectionObserver
  this.canAnimate = ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype);
  initCountUp(this);
};

CountUp.prototype.reset = function() { // reset element to its initial value
  if(!this.canAnimate) return;
  window.cancelAnimationFrame(this.intervalId);
  this.element.textContent = this.initialValue;
};  

CountUp.prototype.restart = function() { // restart element animation
  countUpAnimate(this);
};

function initCountUp(countup) {
  if(!countup.canAnimate) { // IntersectionObserver not supported
    countUpShow(countup);
    return;
  }

  // reset countUp for SR
  initCountUpSr(countup);

  // listen for the element to enter the viewport -> start animation
  var observer = new IntersectionObserver(countupObserve.bind(countup), { threshold: [0, 0.1] });
  observer.observe(countup.element);

  // listen to events
  countup.element.addEventListener('countUpReset', function(){countup.reset();});
  countup.element.addEventListener('countUpRestart', function(){countup.restart();});
};

function countUpShow(countup) { // reveal countup after it has been initialized
  Util.addClass(countup.element.closest('.countup'), 'countup--is-visible');
};

function countupObserve(entries, observer) { // observe countup position -> start animation when inside viewport
  if(entries[0].intersectionRatio.toFixed(1) > 0 && !this.animationTriggered) {
    countUpAnimate(this);
  }
};

function countUpAnimate(countup) { // animate countup
  countup.element.textContent = countup.initialValue;
  countUpShow(countup);
  window.cancelAnimationFrame(countup.intervalId);
  var currentTime = null;

  function runCountUp(timestamp) {
    if (!currentTime) currentTime = timestamp;        
    var progress = timestamp - currentTime;
    if(progress > countup.options.duration) progress = countup.options.duration;
    var val = getValEaseOut(progress, countup.initialValue, countup.finalValue - countup.initialValue, countup.options.duration);
    countup.element.textContent = getCountUpValue(val, countup);
    if(progress < countup.options.duration) {
      countup.intervalId = window.requestAnimationFrame(runCountUp);
    } else {
      countUpComplete(countup);
    }
  };

  countup.intervalId = window.requestAnimationFrame(runCountUp);
};

function getCountUpValue(val, countup) { // reset new countup value to proper decimal places+separator
  if(countup.options.decimal) {val = parseFloat(val.toFixed(countup.options.decimal));}
  else {val = parseInt(val);}
  if(countup.options.separator) val = val.toLocaleString('en');
  return val;
}

function countUpComplete(countup) { // emit event when animation is over
  countup.element.dispatchEvent(new CustomEvent('countUpComplete'));
  countup.animationTriggered = true;
};

function initCountUpSr(countup) { // make sure countup is accessible
  // hide elements that will be animated to SR
  countup.element.setAttribute('aria-hidden', 'true');
  // create new element with visible final value - accessible to SR only
  var srValue = document.createElement('span');
  srValue.textContent = countup.finalValue;
  Util.addClass(srValue, 'sr-only');
  countup.element.parentNode.insertBefore(srValue, countup.element.nextSibling);
};

function getValEaseOut(t, b, c, d) { 
  t /= d;
  return -c * t*(t-2) + b;
};

CountUp.defaults = {
  element : '',
  separator : false,
  duration: 3000,
  decimal: false,
  initial: 0
};

window.CountUp = CountUp;

//initialize the CountUp objects
var countUp = document.getElementsByClassName('js-countup');
if( countUp.length > 0 ) {
  for( var i = 0; i < countUp.length; i++) {(function(i){
    var separator = (countUp[i].getAttribute('data-countup-sep')) ? countUp[i].getAttribute('data-countup-sep') : false,
      duration = (countUp[i].getAttribute('data-countup-duration')) ? countUp[i].getAttribute('data-countup-duration') : CountUp.defaults.duration,
      decimal = (countUp[i].getAttribute('data-countup-decimal')) ? countUp[i].getAttribute('data-countup-decimal') : false,
      initial = (countUp[i].getAttribute('data-countup-start')) ? countUp[i].getAttribute('data-countup-start') : 0;
    new CountUp({element: countUp[i], separator : separator, duration: duration, decimal: decimal, initial: initial});
  })(i);}
}
}());



// File#: _1_swipe-content ============================================================================
(function() {
var SwipeContent = function(element) {
  this.element = element;
  this.delta = [false, false];
  this.dragging = false;
  this.intervalId = false;
  initSwipeContent(this);
};

function initSwipeContent(content) {
  content.element.addEventListener('mousedown', handleEvent.bind(content));
  content.element.addEventListener('touchstart', handleEvent.bind(content));
};

function initDragging(content) {
  //add event listeners
  content.element.addEventListener('mousemove', handleEvent.bind(content));
  content.element.addEventListener('touchmove', handleEvent.bind(content));
  content.element.addEventListener('mouseup', handleEvent.bind(content));
  content.element.addEventListener('mouseleave', handleEvent.bind(content));
  content.element.addEventListener('touchend', handleEvent.bind(content));
};

function cancelDragging(content) {
  //remove event listeners
  if(content.intervalId) {
    (!window.requestAnimationFrame) ? clearInterval(content.intervalId) : window.cancelAnimationFrame(content.intervalId);
    content.intervalId = false;
  }
  content.element.removeEventListener('mousemove', handleEvent.bind(content));
  content.element.removeEventListener('touchmove', handleEvent.bind(content));
  content.element.removeEventListener('mouseup', handleEvent.bind(content));
  content.element.removeEventListener('mouseleave', handleEvent.bind(content));
  content.element.removeEventListener('touchend', handleEvent.bind(content));
};

function handleEvent(event) {
  switch(event.type) {
    case 'mousedown':
    case 'touchstart':
      startDrag(this, event);
      break;
    case 'mousemove':
    case 'touchmove':
      drag(this, event);
      break;
    case 'mouseup':
    case 'mouseleave':
    case 'touchend':
      endDrag(this, event);
      break;
  }
};

function startDrag(content, event) {
  content.dragging = true;
  // listen to drag movements
  initDragging(content);
  content.delta = [parseInt(unify(event).clientX), parseInt(unify(event).clientY)];
  // emit drag start event
  emitSwipeEvents(content, 'dragStart', content.delta, event.target);
};

function endDrag(content, event) {
  cancelDragging(content);
  // credits: https://css-tricks.com/simple-swipe-with-vanilla-javascript/
  var dx = parseInt(unify(event).clientX), 
    dy = parseInt(unify(event).clientY);
  
  // check if there was a left/right swipe
  if(content.delta && (content.delta[0] || content.delta[0] === 0)) {
    var s = getSign(dx - content.delta[0]);
    
    if(Math.abs(dx - content.delta[0]) > 30) {
      (s < 0) ? emitSwipeEvents(content, 'swipeLeft', [dx, dy]) : emitSwipeEvents(content, 'swipeRight', [dx, dy]);	
    }
    
    content.delta[0] = false;
  }
  // check if there was a top/bottom swipe
  if(content.delta && (content.delta[1] || content.delta[1] === 0)) {
    var y = getSign(dy - content.delta[1]);

    if(Math.abs(dy - content.delta[1]) > 30) {
      (y < 0) ? emitSwipeEvents(content, 'swipeUp', [dx, dy]) : emitSwipeEvents(content, 'swipeDown', [dx, dy]);
    }

    content.delta[1] = false;
  }
  // emit drag end event
  emitSwipeEvents(content, 'dragEnd', [dx, dy]);
  content.dragging = false;
};

function drag(content, event) {
  if(!content.dragging) return;
  // emit dragging event with coordinates
  (!window.requestAnimationFrame) 
    ? content.intervalId = setTimeout(function(){emitDrag.bind(content, event);}, 250) 
    : content.intervalId = window.requestAnimationFrame(emitDrag.bind(content, event));
};

function emitDrag(event) {
  emitSwipeEvents(this, 'dragging', [parseInt(unify(event).clientX), parseInt(unify(event).clientY)]);
};

function unify(event) { 
  // unify mouse and touch events
  return event.changedTouches ? event.changedTouches[0] : event; 
};

function emitSwipeEvents(content, eventName, detail, el) {
  var trigger = false;
  if(el) trigger = el;
  // emit event with coordinates
  var event = new CustomEvent(eventName, {detail: {x: detail[0], y: detail[1], origin: trigger}});
  content.element.dispatchEvent(event);
};

function getSign(x) {
  if(!Math.sign) {
    return ((x > 0) - (x < 0)) || +x;
  } else {
    return Math.sign(x);
  }
};

window.SwipeContent = SwipeContent;

//initialize the SwipeContent objects
var swipe = document.getElementsByClassName('js-swipe-content');
if( swipe.length > 0 ) {
  for( var i = 0; i < swipe.length; i++) {
    (function(i){new SwipeContent(swipe[i]);})(i);
  }
}
}());




// File#: _1_stacking-cards ============================================================================
// Usage: codyhouse.co/license
(function() {
var StackCards = function(element) {
  this.element = element;
  this.items = this.element.getElementsByClassName('js-stack-cards__item');
  this.scrollingFn = false;
  this.scrolling = false;
  initStackCardsEffect(this); 
  initStackCardsResize(this); 
};

function initStackCardsEffect(element) { // use Intersection Observer to trigger animation
  setStackCards(element); // store cards CSS properties
  var observer = new IntersectionObserver(stackCardsCallback.bind(element), { threshold: [0, 1] });
  observer.observe(element.element);
};

function initStackCardsResize(element) { // detect resize to reset gallery
  element.element.addEventListener('resize-stack-cards', function(){
    setStackCards(element);
    animateStackCards.bind(element);
  });
};

function stackCardsCallback(entries) { // Intersection Observer callback
  if(entries[0].isIntersecting) {
    if(this.scrollingFn) return; // listener for scroll event already added
    stackCardsInitEvent(this);
  } else {
    if(!this.scrollingFn) return; // listener for scroll event already removed
    window.removeEventListener('scroll', this.scrollingFn);
    this.scrollingFn = false;
  }
};

function stackCardsInitEvent(element) {
  element.scrollingFn = stackCardsScrolling.bind(element);
  window.addEventListener('scroll', element.scrollingFn);
};

function stackCardsScrolling() {
  if(this.scrolling) return;
  this.scrolling = true;
  window.requestAnimationFrame(animateStackCards.bind(this));
};

function setStackCards(element) {
  // store wrapper properties
  element.marginY = getComputedStyle(element.element).getPropertyValue('--stack-cards-gap');
  getIntegerFromProperty(element); // convert element.marginY to integer (px value)
  element.elementHeight = element.element.offsetHeight;

  // store card properties
  var cardStyle = getComputedStyle(element.items[0]);
  element.cardTop = Math.floor(parseFloat(cardStyle.getPropertyValue('top')));
  element.cardHeight = Math.floor(parseFloat(cardStyle.getPropertyValue('height')));

  // store window property
  element.windowHeight = window.innerHeight;

  // reset margin + translate values
  if(isNaN(element.marginY)) {
    element.element.style.paddingBottom = '0px';
  } else {
    element.element.style.paddingBottom = (element.marginY*(element.items.length - 1))+'px';
  }

  for(var i = 0; i < element.items.length; i++) {
    if(isNaN(element.marginY)) {
      element.items[i].style.transform = 'none;';
    } else {
      element.items[i].style.transform = 'translateY('+element.marginY*i+'px)';
    }
  }
};

function getIntegerFromProperty(element) {
  var node = document.createElement('div');
  node.setAttribute('style', 'opacity:0; visbility: hidden;position: absolute; height:'+element.marginY);
  element.element.appendChild(node);
  element.marginY = parseInt(getComputedStyle(node).getPropertyValue('height'));
  element.element.removeChild(node);
};

function animateStackCards() {
  if(isNaN(this.marginY)) { // --stack-cards-gap not defined - do not trigger the effect
    this.scrolling = false;
    return; 
  }

  var top = this.element.getBoundingClientRect().top;

  if( this.cardTop - top + this.element.windowHeight - this.elementHeight - this.cardHeight + this.marginY + this.marginY*this.items.length > 0) { 
    this.scrolling = false;
    return;
  }

  for(var i = 0; i < this.items.length; i++) { // use only scale
    var scrolling = this.cardTop - top - i*(this.cardHeight+this.marginY);
    if(scrolling > 0) {  
      var scaling = i == this.items.length - 1 ? 1 : (this.cardHeight - scrolling*0.05)/this.cardHeight;
      this.items[i].style.transform = 'translateY('+this.marginY*i+'px) scale('+scaling+')';
    } else {
      this.items[i].style.transform = 'translateY('+this.marginY*i+'px)';
    }
  }

  this.scrolling = false;
};

// initialize StackCards object
var stackCards = document.getElementsByClassName('js-stack-cards'),
  intersectionObserverSupported = ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype),
  reducedMotion = Util.osHasReducedMotion();
  
if(stackCards.length > 0 && intersectionObserverSupported && !reducedMotion) { 
  var stackCardsArray = [];
  for(var i = 0; i < stackCards.length; i++) {
    (function(i){
      stackCardsArray.push(new StackCards(stackCards[i]));
    })(i);
  }
  
  var resizingId = false,
    customEvent = new CustomEvent('resize-stack-cards');
  
  window.addEventListener('resize', function() {
    clearTimeout(resizingId);
    resizingId = setTimeout(doneResizing, 500);
  });

  function doneResizing() {
    for( var i = 0; i < stackCardsArray.length; i++) {
      (function(i){stackCardsArray[i].element.dispatchEvent(customEvent)})(i);
    };
  };
}
}());




// File#: _1_countdown ============================================================================
// Usage: codyhouse.co/license
(function() {
var CountDown = function(element) {
  this.element = element;
  this.labels = this.element.getAttribute('data-labels') ? this.element.getAttribute('data-labels').split(',') : [];
  this.intervalId;
  //create countdown HTML
  this.createCountDown();
  //store time elements
  this.days = this.element.getElementsByClassName('js-countdown__value--0')[0];
  this.hours = this.element.getElementsByClassName('js-countdown__value--1')[0];
  this.mins = this.element.getElementsByClassName('js-countdown__value--2')[0];
  this.secs = this.element.getElementsByClassName('js-countdown__value--3')[0];
  this.endTime = this.getEndTime();
  //init counter
  this.initCountDown();
};

CountDown.prototype.createCountDown = function() {
  var wrapper = document.createElement("div");
  Util.setAttributes(wrapper, {'aria-hidden': 'true', 'class': 'countdown__timer'});

  for(var i = 0; i < 4; i++) {
    var timeItem = document.createElement("span"),
      timeValue = document.createElement("span"),
      timeLabel = document.createElement('span');
    
    timeItem.setAttribute('class', 'countdown__item');
    timeValue.setAttribute('class', 'countdown__value countdown__value--'+i+' js-countdown__value--'+i);
    timeItem.appendChild(timeValue);

    if( this.labels && this.labels.length > 0 ) {
      timeLabel.textContent = this.labels[i].trim();
      timeLabel.setAttribute('class', 'countdown__label');
      timeItem.appendChild(timeLabel);
    }
    
    wrapper.appendChild(timeItem);
  }
  // append new content to countdown element
  this.element.insertBefore(wrapper, this.element.firstChild);
  // this.element.appendChild(wrapper);
};

CountDown.prototype.getEndTime = function() {
  // get number of remaining seconds 
  if(this.element.getAttribute('data-timer')) return Number(this.element.getAttribute('data-timer'))*1000 + new Date().getTime();
  else if(this.element.getAttribute('data-countdown')) return Number(new Date(this.element.getAttribute('data-countdown')).getTime());
};

CountDown.prototype.initCountDown = function() {
  var self = this;
  this.intervalId = setInterval(function(){
    self.updateCountDown(false);
  }, 1000);
  this.updateCountDown(true);
};

CountDown.prototype.updateCountDown = function(bool) {
  // original countdown function
  // https://gist.github.com/adriennetacke/f5a25c304f1b7b4a6fa42db70415bad2
  var time = parseInt( (this.endTime - new Date().getTime())/1000 ),
    days = 0,
    hours = 0,
    mins = 0,
    seconds = 0;

  if(isNaN(time) || time < 0) {
    clearInterval(this.intervalId);
    this.emitEndEvent();
  } else {
    days = parseInt(time / 86400);
    time = (time % 86400);
    hours = parseInt(time / 3600);
    time = (time % 3600);
    mins = parseInt(time / 60);
    time = (time % 60);
    seconds = parseInt(time);
  }
  
  // hide days/hours/mins if not available 
  if(bool && days == 0) this.days.parentElement.style.display = "none";
  if(bool && days == 0 && hours == 0) this.hours.parentElement.style.display = "none";
  if(bool && days == 0 && hours == 0 && mins == 0) this.mins.parentElement.style.display = "none";
  
  this.days.textContent = days;
  this.hours.textContent = this.getTimeFormat(hours);
  this.mins.textContent = this.getTimeFormat(mins);
  this.secs.textContent = this.getTimeFormat(seconds);
};

CountDown.prototype.getTimeFormat = function(time) {
  return ('0'+ time).slice(-2);
};

CountDown.prototype.emitEndEvent = function(time) {
  var event = new CustomEvent('countDownFinished');
  this.element.dispatchEvent(event);
};

//initialize the CountDown objects
var countDown = document.getElementsByClassName('js-countdown');
if( countDown.length > 0 ) {
  for( var i = 0; i < countDown.length; i++) {
    (function(i){new CountDown(countDown[i]);})(i);
  }
}
}());



// File#: _2_modal-video
// Usage: codyhouse.co/license
(function() {
  var ModalVideo = function(element) {
    this.element = element;
    this.modalContent = this.element.getElementsByClassName('js-modal-video__content')[0];
    this.media = this.element.getElementsByClassName('js-modal-video__media')[0];
    this.contentIsIframe = this.media.tagName.toLowerCase() == 'iframe';
    this.modalIsOpen = false;
    this.initModalVideo();
  };

  ModalVideo.prototype.initModalVideo = function() {
    var self = this;
    // reveal modal content when iframe is ready
    this.addLoadListener();
    // listen for the modal element to be open -> set new iframe src attribute
    this.element.addEventListener('modalIsOpen', function(event){
      self.modalIsOpen = true;
      self.media.setAttribute('src', event.detail.closest('[aria-controls]').getAttribute('data-url'));
    });
    // listen for the modal element to be close -> reset iframe and hide modal content
    this.element.addEventListener('modalIsClose', function(event){
      self.modalIsOpen = false;
      Util.addClass(self.element, 'modal--is-loading');
      self.media.setAttribute('src', '');
    });
  };

  ModalVideo.prototype.addLoadListener = function() {
    var self = this;
    if(this.contentIsIframe) {
      this.media.onload = function () {
        self.revealContent();
      };
    } else {
      this.media.addEventListener('loadedmetadata', function(){
        self.revealContent();
      });
    }
    
  };

  ModalVideo.prototype.revealContent = function() {
    if( !this.modalIsOpen ) return;
    Util.removeClass(this.element, 'modal--is-loading');
    this.contentIsIframe ? this.media.contentWindow.focus() : this.media.focus();
  };

  //initialize the ModalVideo objects
  var modalVideos = document.getElementsByClassName('js-modal-video__media');
  if( modalVideos.length > 0 ) {
    for( var i = 0; i < modalVideos.length; i++) {
      (function(i){new ModalVideo(modalVideos[i].closest('.js-modal'));})(i);
    }
  }
}());


// File#: _2_image-comparison-slider ============================================================================
// Usage: codyhouse.co/license
(function() {
var ComparisonSlider = function(element) {
  this.element = element;
  this.modifiedImg = this.element.getElementsByClassName('js-compare-slider__img--modified')[0];
  this.handle = this.element.getElementsByClassName('js-compare-slider__handle')[0];
  this.keyboardHandle = this.element.getElementsByClassName('js-compare-slider__input-handle')[0];
  this.captions = this.element.getElementsByClassName('js-compare-slider__caption');
  // drag
  this.dragStart = false;
  this.animating = false;
  this.leftPosition = 50;
  // store container width
  this.sliderWidth = getSliderWidth(this);
  initComparisonSlider(this);
};

function getSliderWidth(slider) {
  return slider.element.offsetWidth;
};

function initComparisonSlider(slider) {
  // initial animation
  if(reducedMotion) { // do not animate slider elements
    Util.addClass(slider.element, 'compare-slider--reduced-motion compare-slider--in-viewport');
  } else if(intersectionObserverSupported) { // reveal slider elements when it enters the viewport
    var observer = new IntersectionObserver(sliderObserve.bind(slider), { threshold: [0, 0.3] });
    observer.observe(slider.element);
  } else { // reveal slider elements right away
    Util.addClass(slider.element, 'compare-slider--in-viewport');
  }
  // init drag functionality
  new SwipeContent(slider.element);
  slider.element.addEventListener('dragStart', function(event){
    if(!event.detail.origin.closest('.js-compare-slider__handle')) return;
    Util.addClass(slider.element, 'compare-slider--is-dragging');
    if(!slider.dragStart) {
      slider.dragStart = event.detail.x;
      detectDragEnd(slider);
    }
  });
  // slider.element.addEventListener('dragging', function(event){
  slider.element.addEventListener('mousemove', function(event){
    sliderDragging(slider, event)
  });
  slider.element.addEventListener('touchmove', function(event){
    sliderDragging(slider, event)
  });

  // detect mouse leave
  slider.element.addEventListener('mouseleave', function(event){
    sliderResetDragging(slider, event);
  });
  slider.element.addEventListener('touchend', function(event){
    sliderResetDragging(slider, event);
  });

  // on resize -> update slider width
  window.addEventListener('resize', function(){
    slider.sliderWidth = getSliderWidth(slider);
  });

  // detect change in keyboardHandle input -> allow keyboard navigation
  slider.keyboardHandle.addEventListener('change', function(event){
    slider.leftPosition = Number(slider.keyboardHandle.value);
    updateCompareSlider(slider, 0);
  });
};

function sliderDragging(slider, event) {
  if(!slider.dragStart) return;
  var pageX = event.pageX || event.touches[0].pageX;
  if(slider.animating || Math.abs(pageX - slider.dragStart) < 5) return;
  slider.animating = true;
  updateCompareSlider(slider, pageX - slider.dragStart);
  slider.dragStart = pageX;
};

function sliderResetDragging(slider, event) {
  if(!slider.dragStart) return;
  if(event.pageX < slider.element.offsetLeft) {
    slider.leftPosition = 0;
    updateCompareSlider(slider, 0);
  }
  if(event.pageX > slider.element.offsetLeft + slider.element.offsetWidth) {
    slider.leftPosition = 100;
    updateCompareSlider(slider, 0);
  }
};

function sliderObserve(entries, observer) {
  if(entries[0].intersectionRatio.toFixed(1) > 0) { // reveal slider elements when in viewport
    Util.addClass(this.element, 'compare-slider--in-viewport');
    observer.unobserve(this.element);
  }
};

function detectDragEnd(slider) {
  document.addEventListener('click', function cb(event){
    document.removeEventListener('click', cb);
    Util.removeClass(slider.element, 'compare-slider--is-dragging');
    updateCompareSlider(slider, event.detail.x - slider.dragStart);
    slider.dragStart = false;
  });
};

function updateCompareSlider(slider, delta) {
  var percentage = (delta*100/slider.sliderWidth);
  if(isNaN(percentage)) return;
  slider.leftPosition = Number((slider.leftPosition + percentage).toFixed(2));
  if(slider.leftPosition < 0) slider.leftPosition = 0;
  if(slider.leftPosition > 100) slider.leftPosition = 100; 
  // update slider elements -> modified img width + handle position + input element (keyboard accessibility)
  slider.keyboardHandle.value = slider.leftPosition;
  slider.handle.style.left = slider.leftPosition + '%';
  slider.modifiedImg.style.width = slider.leftPosition + '%'; 
  updateCompareLabels(slider);
  slider.animating = false;
};

function updateCompareLabels(slider) { // update captions visibility
  for(var i = 0; i < slider.captions.length; i++) {
    var delta = ( i == 0 ) 
      ? slider.captions[i].offsetLeft - slider.modifiedImg.offsetLeft - slider.modifiedImg.offsetWidth
      : slider.modifiedImg.offsetLeft + slider.modifiedImg.offsetWidth - slider.captions[i].offsetLeft - slider.captions[i].offsetWidth;
    Util.toggleClass(slider.captions[i], 'compare-slider__caption--is-hidden', delta < 10);
  }
};

//initialize the ComparisonSlider objects
var comparisonSliders = document.getElementsByClassName('js-compare-slider'),
  intersectionObserverSupported = ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype),
  reducedMotion = Util.osHasReducedMotion();
if( comparisonSliders.length > 0 ) {
  for( var i = 0; i < comparisonSliders.length; i++) {
    (function(i){
      new ComparisonSlider(comparisonSliders[i]);
    })(i);
  }
}
}());



// File#: _1_reading-progressbar
// Usage: codyhouse.co/license
(function() {
var readingIndicator = document.getElementsByClassName('js-reading-progressbar')[0],
  readingIndicatorContent = document.getElementsByClassName('js-reading-content')[0];

if( readingIndicator && readingIndicatorContent) {
  var progressInfo = [],
    progressEvent = false,
    progressFallback = readingIndicator.getElementsByClassName('js-reading-progressbar__fallback')[0],
    progressIsSupported = 'value' in readingIndicator;

  progressInfo['height'] = readingIndicatorContent.offsetHeight;
  progressInfo['top'] = readingIndicatorContent.getBoundingClientRect().top;
  progressInfo['window'] = window.innerHeight;
  progressInfo['class'] = 'reading-progressbar--is-active';
  
  //init indicator
  setProgressIndicator();
  // wait for font to be loaded - reset progress bar
  if(document.fonts) {
    document.fonts.ready.then(function() {
      triggerReset();
    });
  }
  // listen to window resize - update progress
  window.addEventListener('resize', function(event){
    triggerReset();
  });

  //listen to the window scroll event - update progress
  window.addEventListener('scroll', function(event){
    if(progressEvent) return;
    progressEvent = true;
    (!window.requestAnimationFrame) ? setTimeout(function(){setProgressIndicator();}, 250) : window.requestAnimationFrame(setProgressIndicator);
  });
  
  function setProgressIndicator() {
    progressInfo['top'] = readingIndicatorContent.getBoundingClientRect().top;
    if(progressInfo['height'] <= progressInfo['window']) {
      // short content - hide progress indicator
      Util.removeClass(readingIndicator, progressInfo['class']);
      progressEvent = false;
      return;
    }
    // get new progress and update element
    Util.addClass(readingIndicator, progressInfo['class']);
    var value = (progressInfo['top'] >= 0) ? 0 : 100*(0 - progressInfo['top'])/(progressInfo['height'] - progressInfo['window']);
    readingIndicator.setAttribute('value', value);
    if(!progressIsSupported && progressFallback) progressFallback.style.width = value+'%';
    progressEvent = false;
  };

  function triggerReset() {
    if(progressEvent) return;
    progressEvent = true;
    (!window.requestAnimationFrame) ? setTimeout(function(){resetProgressIndicator();}, 250) : window.requestAnimationFrame(resetProgressIndicator);
  };

  function resetProgressIndicator() {
    progressInfo['height'] = readingIndicatorContent.offsetHeight;
    progressInfo['window'] = window.innerHeight;
    setProgressIndicator();
  };
}
}());



// File#: _1_sticky-hero ============================================================================
// Usage: codyhouse.co/license
(function() {
var StickyBackground = function(element) {
  this.element = element;
  this.scrollingElement = this.element.getElementsByClassName('sticky-hero__content')[0];
  this.nextElement = this.element.nextElementSibling;
  this.scrollingTreshold = 0;
  this.nextTreshold = 0;
  initStickyEffect(this);
};

function initStickyEffect(element) {
  var observer = new IntersectionObserver(stickyCallback.bind(element), { threshold: [0, 0.1, 1] });
  observer.observe(element.scrollingElement);
  if(element.nextElement) observer.observe(element.nextElement);
};

function stickyCallback(entries, observer) {
  var threshold = entries[0].intersectionRatio.toFixed(1);
  (entries[0].target ==  this.scrollingElement)
    ? this.scrollingTreshold = threshold
    : this.nextTreshold = threshold;

  Util.toggleClass(this.element, 'sticky-hero--media-is-fixed', (this.nextTreshold > 0 || this.scrollingTreshold > 0));
};


var stickyBackground = document.getElementsByClassName('js-sticky-hero'),
  intersectionObserverSupported = ('IntersectionObserver' in window && 'IntersectionObserverEntry' in window && 'intersectionRatio' in window.IntersectionObserverEntry.prototype);
if(stickyBackground.length > 0 && intersectionObserverSupported) { // if IntersectionObserver is not supported, animations won't be triggeres
  for(var i = 0; i < stickyBackground.length; i++) {
    (function(i){ // if animations are enabled -> init the StickyBackground object
      if( Util.hasClass(stickyBackground[i], 'sticky-hero--overlay-layer') || Util.hasClass(stickyBackground[i], 'sticky-hero--scale')) new StickyBackground(stickyBackground[i]);
    })(i);
  }
}
}());



// File#: _1_diagonal-movement ============================================================================
// Usage: codyhouse.co/license
/*
Modified version of the jQuery-menu-aim plugin
https://github.com/kamens/jQuery-menu-aim
- Replaced jQuery with Vanilla JS
- Minor changes
*/
(function() {
var menuAim = function(opts) {
  init(opts);
};

window.menuAim = menuAim;

function init(opts) {
  var activeRow = null,
    mouseLocs = [],
    lastDelayLoc = null,
    timeoutId = null,
    options = Util.extend({
      menu: '',
      rows: false, //if false, get direct children - otherwise pass nodes list 
      submenuSelector: "*",
      submenuDirection: "right",
      tolerance: 75,  // bigger = more forgivey when entering submenu
      enter: function(){},
      exit: function(){},
      activate: function(){},
      deactivate: function(){},
      exitMenu: function(){}
    }, opts),
    menu = options.menu;

  var MOUSE_LOCS_TRACKED = 3,  // number of past mouse locations to track
    DELAY = 300;  // ms delay when user appears to be entering submenu

  /**
   * Keep track of the last few locations of the mouse.
   */
  var mousemoveDocument = function(e) {
    mouseLocs.push({x: e.pageX, y: e.pageY});

    if (mouseLocs.length > MOUSE_LOCS_TRACKED) {
      mouseLocs.shift();
    }
  };

  /**
   * Cancel possible row activations when leaving the menu entirely
   */
  var mouseleaveMenu = function() {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }

    // If exitMenu is supplied and returns true, deactivate the
    // currently active row on menu exit.
    if (options.exitMenu(this)) {
      if (activeRow) {
        options.deactivate(activeRow);
      }

      activeRow = null;
    }
  };

  /**
   * Trigger a possible row activation whenever entering a new row.
   */
  var mouseenterRow = function() {
    if (timeoutId) {
      // Cancel any previous activation delays
      clearTimeout(timeoutId);
    }

    options.enter(this);
    possiblyActivate(this);
  },
  mouseleaveRow = function() {
    options.exit(this);
  };

  /*
   * Immediately activate a row if the user clicks on it.
   */
  var clickRow = function() {
    activate(this);
  };  

  /**
   * Activate a menu row.
   */
  var activate = function(row) {
    if (row == activeRow) {
      return;
    }

    if (activeRow) {
      options.deactivate(activeRow);
    }

    options.activate(row);
    activeRow = row;
  };

  /**
   * Possibly activate a menu row. If mouse movement indicates that we
   * shouldn't activate yet because user may be trying to enter
   * a submenu's content, then delay and check again later.
   */
  var possiblyActivate = function(row) {
    var delay = activationDelay();

    if (delay) {
      timeoutId = setTimeout(function() {
        possiblyActivate(row);
      }, delay);
    } else {
      activate(row);
    }
  };

  /**
   * Return the amount of time that should be used as a delay before the
   * currently hovered row is activated.
   *
   * Returns 0 if the activation should happen immediately. Otherwise,
   * returns the number of milliseconds that should be delayed before
   * checking again to see if the row should be activated.
   */
  var activationDelay = function() {
    if (!activeRow || !Util.is(activeRow, options.submenuSelector)) {
      // If there is no other submenu row already active, then
      // go ahead and activate immediately.
      return 0;
    }

    function getOffset(element) {
      var rect = element.getBoundingClientRect();
      return { top: rect.top + window.pageYOffset, left: rect.left + window.pageXOffset };
    };

    var offset = getOffset(menu),
        upperLeft = {
            x: offset.left,
            y: offset.top - options.tolerance
        },
        upperRight = {
            x: offset.left + menu.offsetWidth,
            y: upperLeft.y
        },
        lowerLeft = {
            x: offset.left,
            y: offset.top + menu.offsetHeight + options.tolerance
        },
        lowerRight = {
            x: offset.left + menu.offsetWidth,
            y: lowerLeft.y
        },
        loc = mouseLocs[mouseLocs.length - 1],
        prevLoc = mouseLocs[0];

    if (!loc) {
      return 0;
    }

    if (!prevLoc) {
      prevLoc = loc;
    }

    if (prevLoc.x < offset.left || prevLoc.x > lowerRight.x || prevLoc.y < offset.top || prevLoc.y > lowerRight.y) {
      // If the previous mouse location was outside of the entire
      // menu's bounds, immediately activate.
      return 0;
    }

    if (lastDelayLoc && loc.x == lastDelayLoc.x && loc.y == lastDelayLoc.y) {
      // If the mouse hasn't moved since the last time we checked
      // for activation status, immediately activate.
      return 0;
    }

    // Detect if the user is moving towards the currently activated
    // submenu.
    //
    // If the mouse is heading relatively clearly towards
    // the submenu's content, we should wait and give the user more
    // time before activating a new row. If the mouse is heading
    // elsewhere, we can immediately activate a new row.
    //
    // We detect this by calculating the slope formed between the
    // current mouse location and the upper/lower right points of
    // the menu. We do the same for the previous mouse location.
    // If the current mouse location's slopes are
    // increasing/decreasing appropriately compared to the
    // previous's, we know the user is moving toward the submenu.
    //
    // Note that since the y-axis increases as the cursor moves
    // down the screen, we are looking for the slope between the
    // cursor and the upper right corner to decrease over time, not
    // increase (somewhat counterintuitively).
    function slope(a, b) {
      return (b.y - a.y) / (b.x - a.x);
    };

    var decreasingCorner = upperRight,
      increasingCorner = lowerRight;

    // Our expectations for decreasing or increasing slope values
    // depends on which direction the submenu opens relative to the
    // main menu. By default, if the menu opens on the right, we
    // expect the slope between the cursor and the upper right
    // corner to decrease over time, as explained above. If the
    // submenu opens in a different direction, we change our slope
    // expectations.
    if (options.submenuDirection == "left") {
      decreasingCorner = lowerLeft;
      increasingCorner = upperLeft;
    } else if (options.submenuDirection == "below") {
      decreasingCorner = lowerRight;
      increasingCorner = lowerLeft;
    } else if (options.submenuDirection == "above") {
      decreasingCorner = upperLeft;
      increasingCorner = upperRight;
    }

    var decreasingSlope = slope(loc, decreasingCorner),
      increasingSlope = slope(loc, increasingCorner),
      prevDecreasingSlope = slope(prevLoc, decreasingCorner),
      prevIncreasingSlope = slope(prevLoc, increasingCorner);

    if (decreasingSlope < prevDecreasingSlope && increasingSlope > prevIncreasingSlope) {
      // Mouse is moving from previous location towards the
      // currently activated submenu. Delay before activating a
      // new menu row, because user may be moving into submenu.
      lastDelayLoc = loc;
      return DELAY;
    }

    lastDelayLoc = null;
    return 0;
  };

  /**
   * Hook up initial menu events
   */
  menu.addEventListener('mouseleave', mouseleaveMenu);  
  var rows = (options.rows) ? options.rows : menu.children;
  if(rows.length > 0) {
    for(var i = 0; i < rows.length; i++) {(function(i){
      rows[i].addEventListener('mouseenter', mouseenterRow);  
      rows[i].addEventListener('mouseleave', mouseleaveRow);
      rows[i].addEventListener('click', clickRow);  
    })(i);}
  }

  document.addEventListener('mousemove', function(event){
  (!window.requestAnimationFrame) ? mousemoveDocument(event) : window.requestAnimationFrame(function(){mousemoveDocument(event);});
  });
};
}());


// File#: _1_tabs
// Usage: codyhouse.co/license
(function() {
var Tab = function(element) {
  this.element = element;
  this.tabList = this.element.getElementsByClassName('js-tabs__controls')[0];
  this.listItems = this.tabList.getElementsByTagName('li');
  this.triggers = this.tabList.getElementsByTagName('a');
  this.panelsList = this.element.getElementsByClassName('js-tabs__panels')[0];
  this.panels = Util.getChildrenByClassName(this.panelsList, 'js-tabs__panel');
  this.hideClass = 'is-hidden';
  this.customShowClass = this.element.getAttribute('data-show-panel-class') ? this.element.getAttribute('data-show-panel-class') : false;
  this.initTab();
};

Tab.prototype.initTab = function() {
  //set initial aria attributes
  this.tabList.setAttribute('role', 'tablist');
  for( var i = 0; i < this.triggers.length; i++) {
    var bool = (i == 0),
      panelId = this.panels[i].getAttribute('id');
    this.listItems[i].setAttribute('role', 'presentation');
    Util.setAttributes(this.triggers[i], {'role': 'tab', 'aria-selected': bool, 'aria-controls': panelId, 'id': 'tab-'+panelId});
    Util.addClass(this.triggers[i], 'js-tabs__trigger'); 
    Util.setAttributes(this.panels[i], {'role': 'tabpanel', 'aria-labelledby': 'tab-'+panelId});
    Util.toggleClass(this.panels[i], this.hideClass, !bool);

    if(!bool) this.triggers[i].setAttribute('tabindex', '-1'); 
  }

  //listen for Tab events
  this.initTabEvents();
};

Tab.prototype.initTabEvents = function() {
  var self = this;
  //click on a new tab -> select content
  this.tabList.addEventListener('click', function(event) {
    if( event.target.closest('.js-tabs__trigger') ) self.triggerTab(event.target.closest('.js-tabs__trigger'), event);
  });
  //arrow keys to navigate through tabs 
  this.tabList.addEventListener('keydown', function(event) {
    if( !event.target.closest('.js-tabs__trigger') ) return;
    if( event.keyCode && event.keyCode == 39 || event.key && event.key == 'ArrowRight' ) {
      self.selectNewTab('next');
    } else if( event.keyCode && event.keyCode == 37 || event.key && event.key == 'ArrowLeft' ) {
      self.selectNewTab('prev');
    }
  });
};

Tab.prototype.selectNewTab = function(direction) {
  var selectedTab = this.tabList.querySelector('[aria-selected="true"]'),
    index = Util.getIndexInArray(this.triggers, selectedTab);
  index = (direction == 'next') ? index + 1 : index - 1;
  //make sure index is in the correct interval 
  //-> from last element go to first using the right arrow, from first element go to last using the left arrow
  if(index < 0) index = this.listItems.length - 1;
  if(index >= this.listItems.length) index = 0;	
  this.triggerTab(this.triggers[index]);
  this.triggers[index].focus();
};

Tab.prototype.triggerTab = function(tabTrigger, event) {
  var self = this;
  event && event.preventDefault();	
  var index = Util.getIndexInArray(this.triggers, tabTrigger);
  //no need to do anything if tab was already selected
  if(this.triggers[index].getAttribute('aria-selected') == 'true') return;
  
  for( var i = 0; i < this.triggers.length; i++) {
    var bool = (i == index);
    Util.toggleClass(this.panels[i], this.hideClass, !bool);
    if(this.customShowClass) Util.toggleClass(this.panels[i], this.customShowClass, bool);
    this.triggers[i].setAttribute('aria-selected', bool);
    bool ? this.triggers[i].setAttribute('tabindex', '0') : this.triggers[i].setAttribute('tabindex', '-1');
  }
};

//initialize the Tab objects
var tabs = document.getElementsByClassName('js-tabs');
if( tabs.length > 0 ) {
  for( var i = 0; i < tabs.length; i++) {
    (function(i){new Tab(tabs[i]);})(i);
  }
}
}());


// File#: _1_looping_tabs ============================================================================
// Usage: codyhouse.co/license
(function() { 
var LoopTab = function(opts) {
  this.options = Util.extend(LoopTab.defaults , opts);
  this.element = this.options.element;
  this.tabList = this.element.getElementsByClassName('js-loop-tabs__controls')[0];
  this.listItems = this.tabList.getElementsByTagName('li');
  this.triggers = this.tabList.getElementsByTagName('a');
  this.panelsList = this.element.getElementsByClassName('js-loop-tabs__panels')[0];
  this.panels = Util.getChildrenByClassName(this.panelsList, 'js-loop-tabs__panel');
  this.assetsList = this.element.getElementsByClassName('js-loop-tabs__assets')[0];
  this.assets = this.assetsList.getElementsByTagName('li');
  this.videos = getVideoElements(this);
  this.panelShowClass = 'loop-tabs__panel--selected';
  this.assetShowClass = 'loop-tabs__asset--selected';
  this.assetExitClass = 'loop-tabs__asset--exit';
  this.controlActiveClass = 'loop-tabs__control--selected';
  // autoplay
  this.autoplayPaused = false;
  this.loopTabAutoId = false;
  this.loopFillAutoId = false;
  this.loopFill = 0;
  initLoopTab(this);
};

function getVideoElements(tab) {
  var videos = [];
  for(var i = 0; i < tab.assets.length; i++) {
    var video = tab.assets[i].getElementsByTagName('video');
    videos[i] = video.length > 0 ? video[0] : false;
  }
  return videos;
};

function initLoopTab(tab) {
  //set initial aria attributes
  tab.tabList.setAttribute('role', 'tablist');
  for( var i = 0; i < tab.triggers.length; i++) {
    var bool = Util.hasClass(tab.triggers[i], tab.controlActiveClass),
      panelId = tab.panels[i].getAttribute('id');
    tab.listItems[i].setAttribute('role', 'presentation');
    Util.setAttributes(tab.triggers[i], {'role': 'tab', 'aria-selected': bool, 'aria-controls': panelId, 'id': 'tab-'+panelId});
    Util.addClass(tab.triggers[i], 'js-loop-tabs__trigger'); 
    Util.setAttributes(tab.panels[i], {'role': 'tabpanel', 'aria-labelledby': 'tab-'+panelId});
    Util.toggleClass(tab.panels[i], tab.panelShowClass, bool);
    Util.toggleClass(tab.assets[i], tab.assetShowClass, bool);
    
    resetVideo(tab, i, bool); // play/pause video if available

    if(!bool) tab.triggers[i].setAttribute('tabindex', '-1'); 
  }
  // add autoplay-off class if needed
  !tab.options.autoplay && Util.addClass(tab.element, 'loop-tabs--autoplay-off');
  //listen for Tab events
  initLoopTabEvents(tab);
};

function initLoopTabEvents(tab) {
  if(tab.options.autoplay) { 
    initLoopTabAutoplay(tab); // init autoplay
    // pause autoplay if user is interacting with the tabs
    tab.element.addEventListener('focusin', function(event){
      pauseLoopTabAutoplay(tab);
      tab.autoplayPaused = true;
    });
    tab.element.addEventListener('focusout', function(event){
      tab.autoplayPaused = false;
      initLoopTabAutoplay(tab);
    });
  }

  //click on a new tab -> select content
  tab.tabList.addEventListener('click', function(event) {
    if( event.target.closest('.js-loop-tabs__trigger') ) triggerLoopTab(tab, event.target.closest('.js-loop-tabs__trigger'), event);
  });
  
  //arrow keys to navigate through tabs 
  tab.tabList.addEventListener('keydown', function(event) {
    if( !event.target.closest('.js-loop-tabs__trigger') ) return;
    if( event.keyCode && event.keyCode == 39 || event.key && event.key.toLowerCase() == 'arrowright' ) {
      pauseLoopTabAutoplay(tab);
      selectNewLoopTab(tab, 'next', true);
    } else if( event.keyCode && event.keyCode == 37 || event.key && event.key.toLowerCase() == 'arrowleft' ) {
      pauseLoopTabAutoplay(tab);
      selectNewLoopTab(tab, 'prev', true);
    }
  });
};

function initLoopTabAutoplay(tab) {
  if(!tab.options.autoplay || tab.autoplayPaused) return;
  tab.loopFill = 0;
  var selectedTab = tab.tabList.getElementsByClassName(tab.controlActiveClass)[0];
  // reset css variables
  for(var i = 0; i < tab.triggers.length; i++) {
    if(cssVariableSupport) tab.triggers[i].style.setProperty('--loop-tabs-filling', 0);
  }
  
  tab.loopTabAutoId = setTimeout(function(){
    selectNewLoopTab(tab, 'next', false);
  }, tab.options.autoplayInterval);
  
  if(cssVariableSupport) { // tab fill effect
    tab.loopFillAutoId = setInterval(function(){
      tab.loopFill = tab.loopFill + 0.005;
      selectedTab.style.setProperty('--loop-tabs-filling', tab.loopFill);
    }, tab.options.autoplayInterval/200);
  }
};

function pauseLoopTabAutoplay(tab) { // pause autoplay
  if(tab.loopTabAutoId) {
    clearTimeout(tab.loopTabAutoId);
    tab.loopTabAutoId = false;
    clearInterval(tab.loopFillAutoId);
    tab.loopFillAutoId = false;
    // make sure the filling line is scaled up
    var selectedTab = tab.tabList.getElementsByClassName(tab.controlActiveClass);
    if(selectedTab.length > 0) selectedTab[0].style.setProperty('--loop-tabs-filling', 1);
  }
};

function selectNewLoopTab(tab, direction, bool) {
  var selectedTab = tab.tabList.getElementsByClassName(tab.controlActiveClass)[0],
    index = Util.getIndexInArray(tab.triggers, selectedTab);
  index = (direction == 'next') ? index + 1 : index - 1;
  //make sure index is in the correct interval 
  //-> from last element go to first using the right arrow, from first element go to last using the left arrow
  if(index < 0) index = tab.listItems.length - 1;
  if(index >= tab.listItems.length) index = 0;	
  triggerLoopTab(tab, tab.triggers[index]);
  bool && tab.triggers[index].focus();
};

function triggerLoopTab(tab, tabTrigger, event) {
  pauseLoopTabAutoplay(tab);
  event && event.preventDefault();	
  var index = Util.getIndexInArray(tab.triggers, tabTrigger);
  //no need to do anything if tab was already selected
  if(Util.hasClass(tab.triggers[index], tab.controlActiveClass)) return;
  
  for( var i = 0; i < tab.triggers.length; i++) {
    var bool = (i == index),
      exit = Util.hasClass(tab.triggers[i], tab.controlActiveClass);
    Util.toggleClass(tab.triggers[i], tab.controlActiveClass, bool);
    Util.toggleClass(tab.panels[i], tab.panelShowClass, bool);
    Util.toggleClass(tab.assets[i], tab.assetShowClass, bool);
    Util.toggleClass(tab.assets[i], tab.assetExitClass, exit);
    tab.triggers[i].setAttribute('aria-selected', bool);
    bool ? tab.triggers[i].setAttribute('tabindex', '0') : tab.triggers[i].setAttribute('tabindex', '-1');

    resetVideo(tab, i, bool); // play/pause video if available

    // listen for the end of animation on asset element and remove exit class
    if(exit) {(function(i){
      tab.assets[i].addEventListener('transitionend', function cb(event){
        tab.assets[i].removeEventListener('transitionend', cb);
        Util.removeClass(tab.assets[i], tab.assetExitClass);
      });
    })(i);}
  }
  
  // restart tab autoplay
  initLoopTabAutoplay(tab);
};

function resetVideo(tab, i, bool) {
  if(tab.videos[i]) {
    if(bool) {
      tab.videos[i].play();
    } else {
      tab.videos[i].pause();
      tab.videos[i].currentTime = 0;
    } 
  }
};

LoopTab.defaults = {
  element : '',
  autoplay : true,
  autoplayInterval: 5000
};

//initialize the Tab objects
var loopTabs = document.getElementsByClassName('js-loop-tabs');
if( loopTabs.length > 0 ) {
  var reducedMotion = Util.osHasReducedMotion(),
    cssVariableSupport = ('CSS' in window) && Util.cssSupports('color', 'var(--var)');
  for( var i = 0; i < loopTabs.length; i++) {
    (function(i){
      var autoplay = (loopTabs[i].getAttribute('data-autoplay') && loopTabs[i].getAttribute('data-autoplay') == 'off' || reducedMotion) ? false : true,
      autoplayInterval = (loopTabs[i].getAttribute('data-autoplay-interval')) ? loopTabs[i].getAttribute('data-autoplay-interval') : 5000;
      new LoopTab({element: loopTabs[i], autoplay : autoplay, autoplayInterval : autoplayInterval});
    })(i);
  }
}
}());

// File#: _2_slideshow ============================================================================
// Usage: codyhouse.co/license
(function() {
var Slideshow = function(opts) {
  this.options = slideshowAssignOptions(Slideshow.defaults , opts);
  this.element = this.options.element;
  this.items = this.element.getElementsByClassName('js-slideshow__item');
  this.controls = this.element.getElementsByClassName('js-slideshow__control'); 
  this.selectedSlide = 0;
  this.autoplayId = false;
  this.autoplayPaused = false;
  this.navigation = false;
  this.navCurrentLabel = false;
  this.ariaLive = false;
  this.moveFocus = false;
  this.animating = false;
  this.supportAnimation = Util.cssSupports('transition');
  this.animationOff = (!Util.hasClass(this.element, 'slideshow--transition-fade') && !Util.hasClass(this.element, 'slideshow--transition-slide') && !Util.hasClass(this.element, 'slideshow--transition-prx'));
  this.animationType = Util.hasClass(this.element, 'slideshow--transition-prx') ? 'prx' : 'slide';
  this.animatingClass = 'slideshow--is-animating';
  initSlideshow(this);
  initSlideshowEvents(this);
  initAnimationEndEvents(this);
};

Slideshow.prototype.showNext = function() {
  showNewItem(this, this.selectedSlide + 1, 'next');
};

Slideshow.prototype.showPrev = function() {
  showNewItem(this, this.selectedSlide - 1, 'prev');
};

Slideshow.prototype.showItem = function(index) {
  showNewItem(this, index, false);
};

Slideshow.prototype.startAutoplay = function() {
  var self = this;
  if(this.options.autoplay && !this.autoplayId && !this.autoplayPaused) {
    self.autoplayId = setInterval(function(){
      self.showNext();
    }, self.options.autoplayInterval);
  }
};

Slideshow.prototype.pauseAutoplay = function() {
  var self = this;
  if(this.options.autoplay) {
    clearInterval(self.autoplayId);
    self.autoplayId = false;
  }
};

function slideshowAssignOptions(defaults, opts) {
  // initialize the object options
  var mergeOpts = {};
  mergeOpts.element = (typeof opts.element !== "undefined") ? opts.element : defaults.element;
  mergeOpts.navigation = (typeof opts.navigation !== "undefined") ? opts.navigation : defaults.navigation;
  mergeOpts.autoplay = (typeof opts.autoplay !== "undefined") ? opts.autoplay : defaults.autoplay;
  mergeOpts.autoplayInterval = (typeof opts.autoplayInterval !== "undefined") ? opts.autoplayInterval : defaults.autoplayInterval;
  mergeOpts.swipe = (typeof opts.swipe !== "undefined") ? opts.swipe : defaults.swipe;
  return mergeOpts;
};

function initSlideshow(slideshow) { // basic slideshow settings
  // if no slide has been selected -> select the first one
  if(slideshow.element.getElementsByClassName('slideshow__item--selected').length < 1) Util.addClass(slideshow.items[0], 'slideshow__item--selected');
  slideshow.selectedSlide = Util.getIndexInArray(slideshow.items, slideshow.element.getElementsByClassName('slideshow__item--selected')[0]);
  // create an element that will be used to announce the new visible slide to SR
  var srLiveArea = document.createElement('div');
  Util.setAttributes(srLiveArea, {'class': 'sr-only js-slideshow__aria-live', 'aria-live': 'polite', 'aria-atomic': 'true'});
  slideshow.element.appendChild(srLiveArea);
  slideshow.ariaLive = srLiveArea;
};

function initSlideshowEvents(slideshow) {
  // if slideshow navigation is on -> create navigation HTML and add event listeners
  if(slideshow.options.navigation) {
    // check if navigation has already been included
    if(slideshow.element.getElementsByClassName('js-slideshow__navigation').length == 0) {
      var navigation = document.createElement('ol'),
        navChildren = '';

      var navClasses = 'slideshow__navigation js-slideshow__navigation';
      if(slideshow.items.length <= 1) {
        navClasses = navClasses + ' is-hidden';
      } 
      
      navigation.setAttribute('class', navClasses);
      for(var i = 0; i < slideshow.items.length; i++) {
        var className = (i == slideshow.selectedSlide) ? 'class="slideshow__nav-item slideshow__nav-item--selected js-slideshow__nav-item"' :  'class="slideshow__nav-item js-slideshow__nav-item"',
          navCurrentLabel = (i == slideshow.selectedSlide) ? '<span class="sr-only js-slideshow__nav-current-label">Current Item</span>' : '';
        navChildren = navChildren + '<li '+className+'><button class="reset"><span class="sr-only">'+ (i+1) + '</span>'+navCurrentLabel+'</button></li>';
      }
      navigation.innerHTML = navChildren;
      slideshow.element.appendChild(navigation);
    }
    
    slideshow.navCurrentLabel = slideshow.element.getElementsByClassName('js-slideshow__nav-current-label')[0]; 
    slideshow.navigation = slideshow.element.getElementsByClassName('js-slideshow__nav-item');

    var dotsNavigation = slideshow.element.getElementsByClassName('js-slideshow__navigation')[0];

    dotsNavigation.addEventListener('click', function(event){
      navigateSlide(slideshow, event, true);
    });
    dotsNavigation.addEventListener('keyup', function(event){
      navigateSlide(slideshow, event, (event.key.toLowerCase() == 'enter'));
    });
  }
  // slideshow arrow controls
  if(slideshow.controls.length > 0) {
    // hide controls if one item available
    if(slideshow.items.length <= 1) {
      Util.addClass(slideshow.controls[0], 'is-hidden');
      Util.addClass(slideshow.controls[1], 'is-hidden');
    }
    slideshow.controls[0].addEventListener('click', function(event){
      event.preventDefault();
      slideshow.showPrev();
      updateAriaLive(slideshow);
    });
    slideshow.controls[1].addEventListener('click', function(event){
      event.preventDefault();
      slideshow.showNext();
      updateAriaLive(slideshow);
    });
  }
  // swipe events
  if(slideshow.options.swipe) {
    //init swipe
    new SwipeContent(slideshow.element);
    slideshow.element.addEventListener('swipeLeft', function(event){
      slideshow.showNext();
    });
    slideshow.element.addEventListener('swipeRight', function(event){
      slideshow.showPrev();
    });
  }
  // autoplay
  if(slideshow.options.autoplay) {
    slideshow.startAutoplay();
    // pause autoplay if user is interacting with the slideshow
    slideshow.element.addEventListener('mouseenter', function(event){
      slideshow.pauseAutoplay();
      slideshow.autoplayPaused = true;
    });
    slideshow.element.addEventListener('focusin', function(event){
      slideshow.pauseAutoplay();
      slideshow.autoplayPaused = true;
    });
    slideshow.element.addEventListener('mouseleave', function(event){
      slideshow.autoplayPaused = false;
      slideshow.startAutoplay();
    });
    slideshow.element.addEventListener('focusout', function(event){
      slideshow.autoplayPaused = false;
      slideshow.startAutoplay();
    });
  }
  // detect if external buttons control the slideshow
  var slideshowId = slideshow.element.getAttribute('id');
  if(slideshowId) {
    var externalControls = document.querySelectorAll('[data-controls="'+slideshowId+'"]');
    for(var i = 0; i < externalControls.length; i++) {
      (function(i){externalControlSlide(slideshow, externalControls[i]);})(i);
    }
  }
  // custom event to trigger selection of a new slide element
  slideshow.element.addEventListener('selectNewItem', function(event){
    // check if slide is already selected
    if(event.detail) {
      if(event.detail - 1 == slideshow.selectedSlide) return;
      showNewItem(slideshow, event.detail - 1, false);
    }
  });
};

function navigateSlide(slideshow, event, keyNav) { 
  // user has interacted with the slideshow navigation -> update visible slide
  var target = ( Util.hasClass(event.target, 'js-slideshow__nav-item') ) ? event.target : event.target.closest('.js-slideshow__nav-item');
  if(keyNav && target && !Util.hasClass(target, 'slideshow__nav-item--selected')) {
    slideshow.showItem(Util.getIndexInArray(slideshow.navigation, target));
    slideshow.moveFocus = true;
    updateAriaLive(slideshow);
  }
};

function initAnimationEndEvents(slideshow) {
  // remove animation classes at the end of a slide transition
  for( var i = 0; i < slideshow.items.length; i++) {
    (function(i){
      slideshow.items[i].addEventListener('animationend', function(){resetAnimationEnd(slideshow, slideshow.items[i]);});
      slideshow.items[i].addEventListener('transitionend', function(){resetAnimationEnd(slideshow, slideshow.items[i]);});
    })(i);
  }
};

function resetAnimationEnd(slideshow, item) {
  setTimeout(function(){ // add a delay between the end of animation and slideshow reset - improve animation performance
    if(Util.hasClass(item,'slideshow__item--selected')) {
      if(slideshow.moveFocus) Util.moveFocus(item);
      emitSlideshowEvent(slideshow, 'newItemVisible', slideshow.selectedSlide);
      slideshow.moveFocus = false;
    }
    Util.removeClass(item, 'slideshow__item--'+slideshow.animationType+'-out-left slideshow__item--'+slideshow.animationType+'-out-right slideshow__item--'+slideshow.animationType+'-in-left slideshow__item--'+slideshow.animationType+'-in-right');
    item.removeAttribute('aria-hidden');
    slideshow.animating = false;
    Util.removeClass(slideshow.element, slideshow.animatingClass); 
  }, 100);
};

function showNewItem(slideshow, index, bool) {
  if(slideshow.items.length <= 1) return;
  if(slideshow.animating && slideshow.supportAnimation) return;
  slideshow.animating = true;
  Util.addClass(slideshow.element, slideshow.animatingClass); 
  if(index < 0) index = slideshow.items.length - 1;
  else if(index >= slideshow.items.length) index = 0;
  var exitItemClass = getExitItemClass(slideshow, bool, slideshow.selectedSlide, index);
  var enterItemClass = getEnterItemClass(slideshow, bool, slideshow.selectedSlide, index);
  // transition between slides
  if(!slideshow.animationOff) Util.addClass(slideshow.items[slideshow.selectedSlide], exitItemClass);
  Util.removeClass(slideshow.items[slideshow.selectedSlide], 'slideshow__item--selected');
  slideshow.items[slideshow.selectedSlide].setAttribute('aria-hidden', 'true'); //hide to sr element that is exiting the viewport
  if(slideshow.animationOff) {
    Util.addClass(slideshow.items[index], 'slideshow__item--selected');
  } else {
    Util.addClass(slideshow.items[index], enterItemClass+' slideshow__item--selected');
  }
  // reset slider navigation appearance
  resetSlideshowNav(slideshow, index, slideshow.selectedSlide);
  slideshow.selectedSlide = index;
  // reset autoplay
  slideshow.pauseAutoplay();
  slideshow.startAutoplay();
  // reset controls/navigation color themes
  resetSlideshowTheme(slideshow, index);
  // emit event
  emitSlideshowEvent(slideshow, 'newItemSelected', slideshow.selectedSlide);
  if(slideshow.animationOff) {
    slideshow.animating = false;
    Util.removeClass(slideshow.element, slideshow.animatingClass);
  }
};

function getExitItemClass(slideshow, bool, oldIndex, newIndex) {
  var className = '';
  if(bool) {
    className = (bool == 'next') ? 'slideshow__item--'+slideshow.animationType+'-out-right' : 'slideshow__item--'+slideshow.animationType+'-out-left'; 
  } else {
    className = (newIndex < oldIndex) ? 'slideshow__item--'+slideshow.animationType+'-out-left' : 'slideshow__item--'+slideshow.animationType+'-out-right';
  }
  return className;
};

function getEnterItemClass(slideshow, bool, oldIndex, newIndex) {
  var className = '';
  if(bool) {
    className = (bool == 'next') ? 'slideshow__item--'+slideshow.animationType+'-in-right' : 'slideshow__item--'+slideshow.animationType+'-in-left'; 
  } else {
    className = (newIndex < oldIndex) ? 'slideshow__item--'+slideshow.animationType+'-in-left' : 'slideshow__item--'+slideshow.animationType+'-in-right';
  }
  return className;
};

function resetSlideshowNav(slideshow, newIndex, oldIndex) {
  if(slideshow.navigation) {
    Util.removeClass(slideshow.navigation[oldIndex], 'slideshow__nav-item--selected');
    Util.addClass(slideshow.navigation[newIndex], 'slideshow__nav-item--selected');
    slideshow.navCurrentLabel.parentElement.removeChild(slideshow.navCurrentLabel);
    slideshow.navigation[newIndex].getElementsByTagName('button')[0].appendChild(slideshow.navCurrentLabel);
  }
};

function resetSlideshowTheme(slideshow, newIndex) {
  var dataTheme = slideshow.items[newIndex].getAttribute('data-theme');
  if(dataTheme) {
    if(slideshow.navigation) slideshow.navigation[0].parentElement.setAttribute('data-theme', dataTheme);
    if(slideshow.controls[0]) slideshow.controls[0].parentElement.setAttribute('data-theme', dataTheme);
  } else {
    if(slideshow.navigation) slideshow.navigation[0].parentElement.removeAttribute('data-theme');
    if(slideshow.controls[0]) slideshow.controls[0].parentElement.removeAttribute('data-theme');
  }
};

function emitSlideshowEvent(slideshow, eventName, detail) {
  var event = new CustomEvent(eventName, {detail: detail});
  slideshow.element.dispatchEvent(event);
};

function updateAriaLive(slideshow) {
  slideshow.ariaLive.innerHTML = 'Item '+(slideshow.selectedSlide + 1)+' of '+slideshow.items.length;
};

function externalControlSlide(slideshow, button) { // control slideshow using external element
  button.addEventListener('click', function(event){
    var index = button.getAttribute('data-index');
    if(!index || index == slideshow.selectedSlide + 1) return;
    event.preventDefault();
    showNewItem(slideshow, index - 1, false);
  });
};

Slideshow.defaults = {
  element : '',
  navigation : true,
  autoplay : false,
  autoplayInterval: 5000,
  swipe: false
};

window.Slideshow = Slideshow;

//initialize the Slideshow objects
var slideshows = document.getElementsByClassName('js-slideshow');
if( slideshows.length > 0 ) {
  for( var i = 0; i < slideshows.length; i++) {
    (function(i){
      var navigation = (slideshows[i].getAttribute('data-navigation') && slideshows[i].getAttribute('data-navigation') == 'off') ? false : true,
        autoplay = (slideshows[i].getAttribute('data-autoplay') && slideshows[i].getAttribute('data-autoplay') == 'on') ? true : false,
        autoplayInterval = (slideshows[i].getAttribute('data-autoplay-interval')) ? slideshows[i].getAttribute('data-autoplay-interval') : 5000,
        swipe = (slideshows[i].getAttribute('data-swipe') && slideshows[i].getAttribute('data-swipe') == 'on') ? true : false;
      new Slideshow({element: slideshows[i], navigation: navigation, autoplay : autoplay, autoplayInterval : autoplayInterval, swipe : swipe});
    })(i);
  }
}
}());


// File#: _2_slideshow-preview-mode ============================================================================
// Usage: codyhouse.co/license
(function() {
var SlideshowPrew = function(opts) {
  this.options = Util.extend(SlideshowPrew.defaults , opts);
  this.element = this.options.element;
  this.list = this.element.getElementsByClassName('js-slideshow-pm__list')[0];
  this.items = this.list.getElementsByClassName('js-slideshow-pm__item');
  this.controls = this.element.getElementsByClassName('js-slideshow-pm__control'); 
  this.selectedSlide = 0;
  this.autoplayId = false;
  this.autoplayPaused = false;
  this.navigation = false;
  this.navCurrentLabel = false;
  this.ariaLive = false;
  this.moveFocus = false;
  this.animating = false;
  this.supportAnimation = Util.cssSupports('transition');
  this.itemWidth = false;
  this.itemMargin = false;
  this.containerWidth = false;
  this.resizeId = false;
  // we will need this to implement keyboard nav
  this.firstFocusable = false;
  this.lastFocusable = false;
  // fallback for browsers not supporting flexbox
  initSlideshow(this);
  initSlideshowEvents(this);
  initAnimationEndEvents(this);
  Util.addClass(this.element, 'slideshow-pm--js-loaded');
};

SlideshowPrew.prototype.showNext = function(autoplay) {
  showNewItem(this, this.selectedSlide + 1, 'next', autoplay);
};

SlideshowPrew.prototype.showPrev = function() {
  showNewItem(this, this.selectedSlide - 1, 'prev');
};

SlideshowPrew.prototype.showItem = function(index) {
  showNewItem(this, index, false);
};

SlideshowPrew.prototype.startAutoplay = function() {
  var self = this;
  if(this.options.autoplay && !this.autoplayId && !this.autoplayPaused) {
    self.autoplayId = setInterval(function(){
      self.showNext(true);
    }, self.options.autoplayInterval);
  }
};

SlideshowPrew.prototype.pauseAutoplay = function() {
  var self = this;
  if(this.options.autoplay) {
    clearInterval(self.autoplayId);
    self.autoplayId = false;
  }
};

function initSlideshow(slideshow) { // basic slideshow settings
  // if no slide has been selected -> select the first one
  if(slideshow.element.getElementsByClassName('slideshow-pm__item--selected').length < 1) Util.addClass(slideshow.items[0], 'slideshow-pm__item--selected');
  slideshow.selectedSlide = Util.getIndexInArray(slideshow.items, slideshow.element.getElementsByClassName('slideshow-pm__item--selected')[0]);
  // now set translate value to the container element
  setTranslateValue(slideshow);
  setTranslate(slideshow);
  resetSlideshowNav(slideshow, 0, slideshow.selectedSlide);
  setFocusableElements(slideshow);
  // if flexbox is not supported, set a width for the list element
  if(!flexSupported) resetSlideshowFlexFallback(slideshow);
  // now add class to animate while translating
  setTimeout(function(){Util.addClass(slideshow.list, 'slideshow-pm__list--has-transition');}, 50);
  // add arai-hidden to not selected slides
  for(var i = 0; i < slideshow.items.length; i++) {
    (i == slideshow.selectedSlide) ? slideshow.items[i].removeAttribute('aria-hidden') : slideshow.items[i].setAttribute('aria-hidden', 'true');
  }
  // create an element that will be used to announce the new visible slide to SR
  var srLiveArea = document.createElement('div');
  Util.setAttributes(srLiveArea, {'class': 'sr-only js-slideshow-pm__aria-live', 'aria-live': 'polite', 'aria-atomic': 'true'});
  slideshow.element.appendChild(srLiveArea);
  slideshow.ariaLive = srLiveArea;
};

function initSlideshowEvents(slideshow) {
  // if slideshow navigation is on -> create navigation HTML and add event listeners
  if(slideshow.options.navigation) {
    var navigation = document.createElement('ol'),
      navChildren = '';
    
    navigation.setAttribute('class', 'slideshow-pm__navigation');
    for(var i = 0; i < slideshow.items.length; i++) {
      var className = (i == slideshow.selectedSlide) ? 'class="slideshow-pm__nav-item slideshow-pm__nav-item--selected js-slideshow-pm__nav-item"' :  'class="slideshow-pm__nav-item js-slideshow-pm__nav-item"',
        navCurrentLabel = (i == slideshow.selectedSlide) ? '<span class="sr-only js-slideshow-pm__nav-current-label">Current Item</span>' : '';
      navChildren = navChildren + '<li '+className+'><button class="reset"><span class="sr-only">'+ (i+1) + '</span>'+navCurrentLabel+'</button></li>';
    }

    navigation.innerHTML = navChildren;
    slideshow.navCurrentLabel = navigation.getElementsByClassName('js-slideshow-pm__nav-current-label')[0]; 
    slideshow.element.appendChild(navigation);
    slideshow.navigation = slideshow.element.getElementsByClassName('js-slideshow-pm__nav-item');

    navigation.addEventListener('click', function(event){
      navigateSlide(slideshow, event, true);
    });
    navigation.addEventListener('keyup', function(event){
      navigateSlide(slideshow, event, (event.key.toLowerCase() == 'enter'));
    });
  }
  // slideshow arrow controls
  if(slideshow.controls.length > 0) {
    slideshow.controls[0].addEventListener('click', function(event){
      event.preventDefault();
      slideshow.showPrev();
      updateAriaLive(slideshow);
    });
    slideshow.controls[1].addEventListener('click', function(event){
      event.preventDefault();
      slideshow.showNext(false);
      updateAriaLive(slideshow);
    });
  }
  // navigate slideshow when clicking on preview
  if(slideshow.options.prewNav) {
    slideshow.element.addEventListener('click', function(event){
      var item = event.target.closest('.js-slideshow-pm__item');
      if(item && !Util.hasClass(item, 'slideshow-pm__item--selected')) {
        slideshow.showItem(Util.getIndexInArray(slideshow.items, item));
      }
    });
  }
  // swipe events
  if(slideshow.options.swipe) {
    //init swipe
    new SwipeContent(slideshow.element);
    slideshow.element.addEventListener('swipeLeft', function(event){
      slideshow.showNext(false);
    });
    slideshow.element.addEventListener('swipeRight', function(event){
      slideshow.showPrev();
    });
  }
  // autoplay
  if(slideshow.options.autoplay) {
    slideshow.startAutoplay();
    // pause autoplay if user is interacting with the slideshow
    slideshow.element.addEventListener('mouseenter', function(event){
      slideshow.pauseAutoplay();
      slideshow.autoplayPaused = true;
    });
    slideshow.element.addEventListener('focusin', function(event){
      slideshow.pauseAutoplay();
      slideshow.autoplayPaused = true;
    });
    slideshow.element.addEventListener('mouseleave', function(event){
      slideshow.autoplayPaused = false;
      slideshow.startAutoplay();
    });
    slideshow.element.addEventListener('focusout', function(event){
      slideshow.autoplayPaused = false;
      slideshow.startAutoplay();
    });
  }
  // keyboard navigation
  initKeyboardEvents(slideshow);
  // reset on resize
  window.addEventListener('resize', function(event){
    slideshow.pauseAutoplay();
    clearTimeout(slideshow.resizeId);
    slideshow.resizeId = setTimeout(function(){
      resetSlideshowResize(slideshow);
      setTimeout(function(){slideshow.startAutoplay();}, 60);
    }, 250)
  });
};

function initKeyboardEvents(slideshow) {
  // tab on selected slide -> if last focusable -> move to prev or next arrow
  // tab + shift selected slide -> if first focusable -> move to container
  if(slideshow.controls.length > 0) {
    // tab+shift on prev arrow -> move focus to last focusable element inside the selected slide (or to the slider container)
    slideshow.controls[0].addEventListener('keydown', function(event){
      if( (event.keyCode && event.keyCode == 9 || event.key && event.key == 'Tab') && event.shiftKey ) moveFocusToLast(slideshow);
    });
    // tab+shift on next arrow -> if first slide selectes -> move focus to last focusable element inside the selected slide (or to the slider container)
    slideshow.controls[1].addEventListener('keydown', function(event){
      if( (event.keyCode && event.keyCode == 9 || event.key && event.key == 'Tab') && event.shiftKey && (slideshow.selectedSlide == 0)) moveFocusToLast(slideshow);
    });
  }
  // check tab is pressed when focus is inside selected slide
  slideshow.element.addEventListener('keydown', function(event){
    if( event.keyCode && event.keyCode == 9 || event.key && event.key == 'Tab' ) {
      var target = event.target.closest('.js-slideshow-pm__item');
      if(target && Util.hasClass(target, 'slideshow-pm__item--selected')) moveFocusOutsideSlide(slideshow, event);
      else if(target || Util.hasClass(event.target, 'js-slideshow-pm') && !event.shiftKey) moveFocusToSelectedSlide(slideshow);
    } 
  });

  // detect tab moves to slideshow 
  window.addEventListener('keyup', function(event){
    if( event.keyCode && event.keyCode == 9 || event.key && event.key == 'Tab') {
      var target = event.target.closest('.js-slideshow-prew__item');
      if(target || Util.hasClass(event.target, 'js-slideshow-prew') && !event.shiftKey) moveFocusToSelectedSlide(slideshow);
    }
  });
};

function moveFocusToLast(slideshow) {
  event.preventDefault();
  if(slideshow.lastFocusable)	{
    slideshow.lastFocusable.focus();
  } else {
    Util.moveFocus(slideshow.element);
  }
};

function moveFocusToSelectedSlide(slideshow) { // focus is inside a slide that is not selected
  event.preventDefault();
  if(slideshow.firstFocusable)	{
    slideshow.firstFocusable.focus();
  } else if(slideshow.controls.length > 0) {
    (slideshow.selectedSlide == 0) ? slideshow.controls[1].getElementsByTagName('button')[0].focus() : slideshow.controls[0].getElementsByTagName('button')[0].focus();
  } else if(slideshow.options.navigation) {
    slideshow.navigation.getElementsByClassName('js-slideshow-pm__nav-item')[0].getElementsByTagName('button')[0].focus();
  }
};

function moveFocusOutsideSlide(slideshow, event) {
  if(event.shiftKey && slideshow.firstFocusable && event.target == slideshow.firstFocusable) {
    // shift+tab -> focus was on first foucusable element inside selected slide -> move to container
    event.preventDefault();
    Util.moveFocus(slideshow.element);
  } else if( !event.shiftKey && slideshow.lastFocusable && event.target == slideshow.lastFocusable) {
    event.preventDefault();
    
    if(slideshow.selectedSlide != 0) slideshow.controls[0].getElementsByTagName('button')[0].focus();
    else slideshow.controls[1].getElementsByTagName('button')[0].focus();
  }
};

function initAnimationEndEvents(slideshow) {
  slideshow.list.addEventListener('transitionend', function(){
    setTimeout(function(){ // add a delay between the end of animation and slideshow reset - improve animation performance
      resetAnimationEnd(slideshow);
    }, 100);
  });
};

function resetAnimationEnd(slideshow) {
  if(slideshow.moveFocus) Util.moveFocus(slideshow.items[slideshow.selectedSlide]);
  slideshow.items[slideshow.selectedSlide].removeAttribute('aria-hidden');
  slideshow.animating = false;
  slideshow.moveFocus = false;
  slideshow.startAutoplay();
};

function navigateSlide(slideshow, event, keyNav) { 
  // user has interacted with the slideshow navigation -> update visible slide
  var target = event.target.closest('.js-slideshow-pm__nav-item');
  if(keyNav && target && !Util.hasClass(target, 'slideshow-pm__nav-item--selected')) {
    slideshow.showItem(Util.getIndexInArray(slideshow.navigation, target));
    slideshow.moveFocus = true;
    updateAriaLive(slideshow);
  }
};

function showNewItem(slideshow, index, bool, autoplay) {
  if(slideshow.animating && slideshow.supportAnimation) return;
  if(autoplay) {
    if(index < 0) index = slideshow.items.length - 1;
    else if(index >= slideshow.items.length) index = 0;
  }
  if(index < 0 || index >= slideshow.items.length) return;
  slideshow.animating = true;
  Util.removeClass(slideshow.items[slideshow.selectedSlide], 'slideshow-pm__item--selected');
  slideshow.items[slideshow.selectedSlide].setAttribute('aria-hidden', 'true'); //hide to sr element that is exiting the viewport
  Util.addClass(slideshow.items[index], 'slideshow-pm__item--selected');
  resetSlideshowNav(slideshow, index, slideshow.selectedSlide);
  slideshow.selectedSlide = index;
  setTranslate(slideshow);
  slideshow.pauseAutoplay();
  setFocusableElements(slideshow);
  if(!transitionSupported) resetAnimationEnd(slideshow);
};

function updateAriaLive(slideshow) {
  slideshow.ariaLive.innerHTML = 'Item '+(slideshow.selectedSlide + 1)+' of '+slideshow.items.length;
};

function resetSlideshowResize(slideshow) {
  Util.removeClass(slideshow.list, 'slideshow-pm__list--has-transition');
  setTimeout(function(){
    setTranslateValue(slideshow);
    setTranslate(slideshow);
    Util.addClass(slideshow.list, 'slideshow-pm__list--has-transition');
  }, 30)
};

function setTranslateValue(slideshow) {
  var itemStyle = window.getComputedStyle(slideshow.items[slideshow.selectedSlide]);

  slideshow.itemWidth = parseFloat(itemStyle.getPropertyValue('width'));
  slideshow.itemMargin = parseFloat(itemStyle.getPropertyValue('margin-right'));
  slideshow.containerWidth = parseFloat(window.getComputedStyle(slideshow.element).getPropertyValue('width'));
};

function setTranslate(slideshow) {
  var translate = parseInt(((slideshow.itemWidth + slideshow.itemMargin) * slideshow.selectedSlide * (-1)) + ((slideshow.containerWidth - slideshow.itemWidth)*0.5));
  slideshow.list.style.transform = 'translateX('+translate+'px)';
  slideshow.list.style.msTransform = 'translateX('+translate+'px)';
};

function resetSlideshowNav(slideshow, newIndex, oldIndex) {
  if(slideshow.navigation) {
    Util.removeClass(slideshow.navigation[oldIndex], 'slideshow-pm__nav-item--selected');
    Util.addClass(slideshow.navigation[newIndex], 'slideshow-pm__nav-item--selected');
    slideshow.navCurrentLabel.parentElement.removeChild(slideshow.navCurrentLabel);
    slideshow.navigation[newIndex].getElementsByTagName('button')[0].appendChild(slideshow.navCurrentLabel);
  }
  if(slideshow.controls.length > 0) {
    Util.toggleClass(slideshow.controls[0], 'slideshow-pm__control--active', newIndex != 0);
    Util.toggleClass(slideshow.controls[1], 'slideshow-pm__control--active', newIndex != (slideshow.items.length - 1));
  }
};

function setFocusableElements(slideshow) {
  //get all focusable elements inside the selected slide
  var allFocusable = slideshow.items[slideshow.selectedSlide].querySelectorAll('[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex]:not([tabindex="-1"]), [contenteditable], audio[controls], video[controls], summary');
  getFirstVisible(slideshow, allFocusable);
  getLastVisible(slideshow, allFocusable);
};

function getFirstVisible(slideshow, elements) {
  slideshow.firstFocusable = false;
  //get first visible focusable element inside the selected slide
  for(var i = 0; i < elements.length; i++) {
    if( elements[i].offsetWidth || elements[i].offsetHeight || elements[i].getClientRects().length ) {
      slideshow.firstFocusable = elements[i];
      return true;
    }
  }
};

function getLastVisible(slideshow, elements) {
  //get last visible focusable element inside the selected slide
  slideshow.lastFocusable = false;
  for(var i = elements.length - 1; i >= 0; i--) {
    if( elements[i].offsetWidth || elements[i].offsetHeight || elements[i].getClientRects().length ) {
      slideshow.lastFocusable = elements[i];
      return true;
    }
  }
};

function resetSlideshowFlexFallback(slideshow) {
  slideshow.list.style.width = ((slideshow.items.length+1)*(slideshow.itemMargin+slideshow.itemWidth))+'px';
  for(var i = 0; i < slideshow.items.length; i++) {slideshow.items[i].style.width = slideshow.itemWidth+'px';}
};

SlideshowPrew.defaults = {
  element : '',
  navigation : true,
  autoplay : false,
  autoplayInterval: 5000,
  prewNav: false,
  swipe: false
};

window.SlideshowPrew = SlideshowPrew;

// initialize the slideshowsPrew objects
var slideshowsPrew = document.getElementsByClassName('js-slideshow-pm'),
  flexSupported = Util.cssSupports('align-items', 'stretch'),
  transitionSupported = Util.cssSupports('transition');
if( slideshowsPrew.length > 0 ) {
  for( var i = 0; i < slideshowsPrew.length; i++) {
    (function(i){
      var navigation = (slideshowsPrew[i].getAttribute('data-navigation') && slideshowsPrew[i].getAttribute('data-navigation') == 'off') ? false : true,
        autoplay = (slideshowsPrew[i].getAttribute('data-autoplay') && slideshowsPrew[i].getAttribute('data-autoplay') == 'on') ? true : false,
        autoplayInterval = (slideshowsPrew[i].getAttribute('data-autoplay-interval')) ? slideshowsPrew[i].getAttribute('data-autoplay-interval') : 5000,
        prewNav = (slideshowsPrew[i].getAttribute('data-pm-nav') && slideshowsPrew[i].getAttribute('data-pm-nav') == 'on' ) ? true : false, 
        swipe = (slideshowsPrew[i].getAttribute('data-swipe') && slideshowsPrew[i].getAttribute('data-swipe') == 'on') ? true : false;
      new SlideshowPrew({element: slideshowsPrew[i], navigation: navigation, autoplay : autoplay, autoplayInterval : autoplayInterval, swipe : swipe, prewNav: prewNav});
    })(i);
  }
}

}());

// File#: _2_dropdown ============================================================================
// Usage: codyhouse.co/license
(function() {
var Dropdown = function(element) {
  this.element = element;
  this.trigger = this.element.getElementsByClassName('js-dropdown__trigger')[0];
  this.dropdown = this.element.getElementsByClassName('js-dropdown__menu')[0];
  this.triggerFocus = false;
  this.dropdownFocus = false;
  this.hideInterval = false;
  // sublevels
  this.dropdownSubElements = this.element.getElementsByClassName('js-dropdown__sub-wrapper');
  this.prevFocus = false; // store element that was in focus before focus changed
  this.addDropdownEvents();
};

Dropdown.prototype.addDropdownEvents = function(){
  //place dropdown
  var self = this;
  this.placeElement();
  this.element.addEventListener('placeDropdown', function(event){
    self.placeElement();
  });
  // init dropdown
  this.initElementEvents(this.trigger, this.triggerFocus); // this is used to trigger the primary dropdown
  this.initElementEvents(this.dropdown, this.dropdownFocus); // this is used to trigger the primary dropdown
  // init sublevels
  this.initSublevels(); // if there are additional sublevels -> bind hover/focus events
};

Dropdown.prototype.placeElement = function() {
  var triggerPosition = this.trigger.getBoundingClientRect(),
    isRight = (window.innerWidth < triggerPosition.left + parseInt(getComputedStyle(this.dropdown).getPropertyValue('width')));

  var xPosition = isRight ? 'right: 0px; left: auto;' : 'left: 0px; right: auto;';
  this.dropdown.setAttribute('style', xPosition);
};

Dropdown.prototype.initElementEvents = function(element, bool) {
  var self = this;
  element.addEventListener('mouseenter', function(){
    bool = true;
    self.showDropdown();
  });
  element.addEventListener('focus', function(){
    self.showDropdown();
  });
  element.addEventListener('mouseleave', function(){
    bool = false;
    self.hideDropdown();
  });
  element.addEventListener('focusout', function(){
    self.hideDropdown();
  });
};

Dropdown.prototype.showDropdown = function(){
  if(this.hideInterval) clearInterval(this.hideInterval);
  this.showLevel(this.dropdown, true);
};

Dropdown.prototype.hideDropdown = function(){
  var self = this;
  if(this.hideInterval) clearInterval(this.hideInterval);
  this.hideInterval = setTimeout(function(){
    var dropDownFocus = document.activeElement.closest('.js-dropdown'),
      inFocus = dropDownFocus && (dropDownFocus == self.element);
    // if not in focus and not hover -> hide
    if(!self.triggerFocus && !self.dropdownFocus && !inFocus) {
      self.hideLevel(self.dropdown);
      // make sure to hide sub/dropdown
      self.hideSubLevels();
      self.prevFocus = false;
    }
  }, 300);
};

Dropdown.prototype.initSublevels = function(){
  var self = this;
  var dropdownMenu = this.element.getElementsByClassName('js-dropdown__menu');
  for(var i = 0; i < dropdownMenu.length; i++) {
    var listItems = dropdownMenu[i].children;
    // bind hover
    new menuAim({
      menu: dropdownMenu[i],
      activate: function(row) {
        var subList = row.getElementsByClassName('js-dropdown__menu')[0];
        if(!subList) return;
        Util.addClass(row.querySelector('a'), 'dropdown__item--hover');
        self.showLevel(subList);
      },
      deactivate: function(row) {
        var subList = row.getElementsByClassName('dropdown__menu')[0];
        if(!subList) return;
        Util.removeClass(row.querySelector('a'), 'dropdown__item--hover');
        self.hideLevel(subList);
      },
      submenuSelector: '.js-dropdown__sub-wrapper',
    });
  }
  // store focus element before change in focus
  this.element.addEventListener('keydown', function(event) { 
    if( event.keyCode && event.keyCode == 9 || event.key && event.key == 'Tab' ) {
      self.prevFocus = document.activeElement;
    }
  });
  // make sure that sublevel are visible when their items are in focus
  this.element.addEventListener('keyup', function(event) {
    if( event.keyCode && event.keyCode == 9 || event.key && event.key == 'Tab' ) {
      // focus has been moved -> make sure the proper classes are added to subnavigation
      var focusElement = document.activeElement,
        focusElementParent = focusElement.closest('.js-dropdown__menu'),
        focusElementSibling = focusElement.nextElementSibling;

      // if item in focus is inside submenu -> make sure it is visible
      if(focusElementParent && !Util.hasClass(focusElementParent, 'dropdown__menu--is-visible')) {
        self.showLevel(focusElementParent);
      }
      // if item in focus triggers a submenu -> make sure it is visible
      if(focusElementSibling && !Util.hasClass(focusElementSibling, 'dropdown__menu--is-visible')) {
        self.showLevel(focusElementSibling);
      }

      // check previous element in focus -> hide sublevel if required 
      if( !self.prevFocus) return;
      var prevFocusElementParent = self.prevFocus.closest('.js-dropdown__menu'),
        prevFocusElementSibling = self.prevFocus.nextElementSibling;
      
      if( !prevFocusElementParent ) return;
      
      // element in focus and element prev in focus are siblings
      if( focusElementParent && focusElementParent == prevFocusElementParent) {
        if(prevFocusElementSibling) self.hideLevel(prevFocusElementSibling);
        return;
      }

      // element in focus is inside submenu triggered by element prev in focus
      if( prevFocusElementSibling && focusElementParent && focusElementParent == prevFocusElementSibling) return;
      
      // shift tab -> element in focus triggers the submenu of the element prev in focus
      if( focusElementSibling && prevFocusElementParent && focusElementSibling == prevFocusElementParent) return;
      
      var focusElementParentParent = focusElementParent.parentNode.closest('.js-dropdown__menu');
      
      // shift tab -> element in focus is inside the dropdown triggered by a siblings of the element prev in focus
      if(focusElementParentParent && focusElementParentParent == prevFocusElementParent) {
        if(prevFocusElementSibling) self.hideLevel(prevFocusElementSibling);
        return;
      }
      
      if(prevFocusElementParent && Util.hasClass(prevFocusElementParent, 'dropdown__menu--is-visible')) {
        self.hideLevel(prevFocusElementParent);
      }
    }
  });
};

Dropdown.prototype.hideSubLevels = function(){
  var visibleSubLevels = this.dropdown.getElementsByClassName('dropdown__menu--is-visible');
  if(visibleSubLevels.length == 0) return;
  while (visibleSubLevels[0]) {
    this.hideLevel(visibleSubLevels[0]);
   }
   var hoveredItems = this.dropdown.getElementsByClassName('dropdown__item--hover');
   while (hoveredItems[0]) {
    Util.removeClass(hoveredItems[0], 'dropdown__item--hover');
   }
};

Dropdown.prototype.showLevel = function(level, bool){
  if(bool == undefined) {
    //check if the sublevel needs to be open to the left
    Util.removeClass(level, 'dropdown__menu--left');
    var boundingRect = level.getBoundingClientRect();
    if(window.innerWidth - boundingRect.right < 5 && boundingRect.left + window.scrollX > 2*boundingRect.width) Util.addClass(level, 'dropdown__menu--left');
  }
  Util.addClass(level, 'dropdown__menu--is-visible');
  Util.removeClass(level, 'dropdown__menu--is-hidden');
};

Dropdown.prototype.hideLevel = function(level){
  if(!Util.hasClass(level, 'dropdown__menu--is-visible')) return;
  Util.removeClass(level, 'dropdown__menu--is-visible');
  Util.addClass(level, 'dropdown__menu--is-hidden');
  
  level.addEventListener('animationend', function cb(){
    level.removeEventListener('animationend', cb);
    Util.removeClass(level, 'dropdown__menu--is-hidden dropdown__menu--left');
  });
};

window.Dropdown = Dropdown;

var dropdown = document.getElementsByClassName('js-dropdown');
if( dropdown.length > 0 ) { // init Dropdown objects
  for( var i = 0; i < dropdown.length; i++) {
    (function(i){new Dropdown(dropdown[i]);})(i);
  }
}
}());



// File#: _3_mega-site-navigation ============================================================================
// Usage: codyhouse.co/license
(function() {
var MegaNav = function(element) {
  this.element = element;
  this.search = this.element.getElementsByClassName('js-mega-nav__search');
  this.searchActiveController = false;
  this.menu = this.element.getElementsByClassName('js-mega-nav__nav');
  this.menuItems = this.menu[0].getElementsByClassName('js-mega-nav__item');
  this.menuActiveController = false;
  this.itemExpClass = 'mega-nav__item--expanded';
  this.classIconBtn = 'mega-nav__icon-btn--state-b';
  this.classSearchVisible = 'mega-nav__search--is-visible';
  this.classNavVisible = 'mega-nav__nav--is-visible';
  this.classMobileLayout = 'mega-nav--mobile';
  this.classDesktopLayout = 'mega-nav--desktop';
  this.layout = 'mobile';
  // store dropdown elements (if present)
  this.dropdown = this.element.getElementsByClassName('js-dropdown');
  // expanded class - added to header when subnav is open
  this.expandedClass = 'mega-nav--expanded';
  initMegaNav(this);
};

function initMegaNav(megaNav) {
  setMegaNavLayout(megaNav); // switch between mobile/desktop layout
  initSearch(megaNav); // controll search navigation
  initMenu(megaNav); // control main menu nav - mobile only
  initSubNav(megaNav); // toggle sub navigation visibility
  
  megaNav.element.addEventListener('update-menu-layout', function(event){
    setMegaNavLayout(megaNav); // window resize - update layout
  });
};

function setMegaNavLayout(megaNav) {
  var layout = getComputedStyle(megaNav.element, ':before').getPropertyValue('content').replace(/\'|"/g, '');
  if(layout == megaNav.layout) return;
  megaNav.layout = layout;
  Util.toggleClass(megaNav.element, megaNav.classDesktopLayout, megaNav.layout == 'desktop');
  Util.toggleClass(megaNav.element, megaNav.classMobileLayout, megaNav.layout != 'desktop');
  if(megaNav.layout == 'desktop') {
    closeSubNav(megaNav, false);
    // if the mega navigation has dropdown elements -> make sure they are in the right position (viewport awareness)
    triggerDropdownPosition(megaNav);
  } 
  closeSearch(megaNav, false);
  resetMegaNavOffset(megaNav); // reset header offset top value
  resetNavAppearance(megaNav); // reset nav expanded appearance
};

function resetMegaNavOffset(megaNav) {
  document.documentElement.style.setProperty('--mega-nav-offset-y', megaNav.element.getBoundingClientRect().top+'px');
};

function closeNavigation(megaNav) { // triggered by Esc key press
  // close search
  closeSearch(megaNav);
  // close nav
  if(Util.hasClass(megaNav.menu[0], megaNav.classNavVisible)) {
    toggleMenu(megaNav, megaNav.menu[0], 'menuActiveController', megaNav.classNavVisible, megaNav.menuActiveController, true);
  }
  //close subnav 
  closeSubNav(megaNav, false);
  resetNavAppearance(megaNav); // reset nav expanded appearance
};

function closeFocusNavigation(megaNav) { // triggered by Tab key pressed
  // close search when focus is lost
  if(Util.hasClass(megaNav.search[0], megaNav.classSearchVisible) && !document.activeElement.closest('.js-mega-nav__search')) {
    toggleMenu(megaNav, megaNav.search[0], 'searchActiveController', megaNav.classSearchVisible, megaNav.searchActiveController, true);
  }
  // close nav when focus is lost
  if(Util.hasClass(megaNav.menu[0], megaNav.classNavVisible) && !document.activeElement.closest('.js-mega-nav__nav')) {
    toggleMenu(megaNav, megaNav.menu[0], 'menuActiveController', megaNav.classNavVisible, megaNav.menuActiveController, true);
  }
  // close subnav when focus is lost
  for(var i = 0; i < megaNav.menuItems.length; i++) {
    if(!Util.hasClass(megaNav.menuItems[i], megaNav.itemExpClass)) continue;
    var parentItem = document.activeElement.closest('.js-mega-nav__item');
    if(parentItem && parentItem == megaNav.menuItems[i]) continue;
    closeSingleSubnav(megaNav, i);
  }
  resetNavAppearance(megaNav); // reset nav expanded appearance
};

function closeSearch(megaNav, bool) {
  if(megaNav.search.length < 1) return;
  if(Util.hasClass(megaNav.search[0], megaNav.classSearchVisible)) {
    toggleMenu(megaNav, megaNav.search[0], 'searchActiveController', megaNav.classSearchVisible, megaNav.searchActiveController, bool);
  }
} ;

function initSearch(megaNav) {
  if(megaNav.search.length == 0) return;
  // toggle search
  megaNav.searchToggles = document.querySelectorAll('[aria-controls="'+megaNav.search[0].getAttribute('id')+'"]');
  for(var i = 0; i < megaNav.searchToggles.length; i++) {(function(i){
    megaNav.searchToggles[i].addEventListener('click', function(event){
      // toggle search
      toggleMenu(megaNav, megaNav.search[0], 'searchActiveController', megaNav.classSearchVisible, megaNav.searchToggles[i], true);
      // close nav if it was open
      if(Util.hasClass(megaNav.menu[0], megaNav.classNavVisible)) {
        toggleMenu(megaNav, megaNav.menu[0], 'menuActiveController', megaNav.classNavVisible, megaNav.menuActiveController, false);
      }
      // close subnavigation if open
      closeSubNav(megaNav, false);
      resetNavAppearance(megaNav); // reset nav expanded appearance
    });
  })(i);}
};

function initMenu(megaNav) {
  if(megaNav.menu.length == 0) return;
  // toggle nav
  megaNav.menuToggles = document.querySelectorAll('[aria-controls="'+megaNav.menu[0].getAttribute('id')+'"]');
  for(var i = 0; i < megaNav.menuToggles.length; i++) {(function(i){
    megaNav.menuToggles[i].addEventListener('click', function(event){
      // toggle nav
      toggleMenu(megaNav, megaNav.menu[0], 'menuActiveController', megaNav.classNavVisible, megaNav.menuToggles[i], true);
      // close search if it was open
      if(Util.hasClass(megaNav.search[0], megaNav.classSearchVisible)) {
        toggleMenu(megaNav, megaNav.search[0], 'searchActiveController', megaNav.classSearchVisible, megaNav.searchActiveController, false);
      }
      resetNavAppearance(megaNav); // reset nav expanded appearance
    });
  })(i);}
};

function toggleMenu(megaNav, element, controller, visibleClass, toggle, moveFocus) {
  var menuIsVisible = Util.hasClass(element, visibleClass);
  Util.toggleClass(element, visibleClass, !menuIsVisible);
  Util.toggleClass(toggle, megaNav.classIconBtn, !menuIsVisible);
  menuIsVisible ? toggle.removeAttribute('aria-expanded') : toggle.setAttribute('aria-expanded', 'true');
  if(menuIsVisible) {
    if(toggle && moveFocus) toggle.focus();
    megaNav[controller] = false;
  } else {
    if(toggle) megaNav[controller] = toggle;
    getFirstFocusable(element).focus(); // move focus to first focusable element
  }
};

function getFirstFocusable(element) {
  var focusableEle = element.querySelectorAll('[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex]:not([tabindex="-1"]), [contenteditable], audio[controls], video[controls], summary'),
    firstFocusable = false;
  for(var i = 0; i < focusableEle.length; i++) {
    if( focusableEle[i].offsetWidth || focusableEle[i].offsetHeight || focusableEle[i].getClientRects().length ) {
      firstFocusable = focusableEle[i];
      break;
    }
  }
  return firstFocusable;
};

function initSubNav(megaNav) {
  // toggle subnavigation visibility
  megaNav.element.addEventListener('click', function(event){
    var triggerBtn = event.target.closest('.js-mega-nav__control');
    if(!triggerBtn) return;
    var mainItem = triggerBtn.closest('.js-mega-nav__item');
    if(!mainItem) return;
    var itemExpanded = Util.hasClass(mainItem, megaNav.itemExpClass);
    Util.toggleClass(mainItem, megaNav.itemExpClass, !itemExpanded);
    itemExpanded ? triggerBtn.removeAttribute('aria-expanded') : triggerBtn.setAttribute('aria-expanded', 'true');
    if(megaNav.layout == 'desktop' && !itemExpanded) closeSubNav(megaNav, mainItem);
    // close search if open
    closeSearch(megaNav, false);
    resetNavAppearance(megaNav); // reset nav expanded appearance
  });
};

function closeSubNav(megaNav, selectedItem) {
  // close subnav when a new sub nav element is open
  if(megaNav.menuItems.length == 0 ) return;
  for(var i = 0; i < megaNav.menuItems.length; i++) {
    if(megaNav.menuItems[i] != selectedItem) closeSingleSubnav(megaNav, i);
  }
};

function closeSingleSubnav(megaNav, index) {
  Util.removeClass(megaNav.menuItems[index], megaNav.itemExpClass);
  var triggerBtn = megaNav.menuItems[index].getElementsByClassName('js-mega-nav__control');
  if(triggerBtn.length > 0) triggerBtn[0].removeAttribute('aria-expanded');
};

function triggerDropdownPosition(megaNav) {
  // emit custom event to properly place dropdown elements - viewport awarness
  if(megaNav.dropdown.length == 0) return;
  for(var i = 0; i < megaNav.dropdown.length; i++) {
    megaNav.dropdown[i].dispatchEvent(new CustomEvent('placeDropdown'));
  }
};

function resetNavAppearance(megaNav) {
  ( (megaNav.element.getElementsByClassName(megaNav.itemExpClass).length > 0 && megaNav.layout == 'desktop') || megaNav.element.getElementsByClassName(megaNav.classSearchVisible).length > 0 ||(megaNav.element.getElementsByClassName(megaNav.classNavVisible).length > 0 && megaNav.layout == 'mobile'))
    ? Util.addClass(megaNav.element, megaNav.expandedClass)
    : Util.removeClass(megaNav.element, megaNav.expandedClass);
};

//initialize the MegaNav objects
var megaNav = document.getElementsByClassName('js-mega-nav');
if(megaNav.length > 0) {
  var megaNavArray = [];
  for(var i = 0; i < megaNav.length; i++) {
    (function(i){megaNavArray.push(new MegaNav(megaNav[i]));})(i);
  }

  // key events
  window.addEventListener('keyup', function(event){
    if( (event.keyCode && event.keyCode == 27) || (event.key && event.key.toLowerCase() == 'escape' )) { // listen for esc key events
      for(var i = 0; i < megaNavArray.length; i++) {(function(i){
        closeNavigation(megaNavArray[i]);
      })(i);}
    }
    // listen for tab key
    if( (event.keyCode && event.keyCode == 9) || (event.key && event.key.toLowerCase() == 'tab' )) { // close search or nav if it looses focus
      for(var i = 0; i < megaNavArray.length; i++) {(function(i){
        closeFocusNavigation(megaNavArray[i]);
      })(i);}
    }
  });

  window.addEventListener('click', function(event){
    if(!event.target.closest('.js-mega-nav')) closeNavigation(megaNavArray[0]);
  });
  
  // resize - update menu layout
  var resizingId = false,
    customEvent = new CustomEvent('update-menu-layout');
  window.addEventListener('resize', function(event){
    clearTimeout(resizingId);
    resizingId = setTimeout(doneResizing, 200);
  });

  function doneResizing() {
    for( var i = 0; i < megaNavArray.length; i++) {
      (function(i){megaNavArray[i].element.dispatchEvent(customEvent)})(i);
    };
  };
}
}());